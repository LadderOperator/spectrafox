Imports Amib.Threading
Imports System.Text.RegularExpressions
Imports System.IO

Public Class mDataBrowserList

#Region "Properties"

#Region "Threading properties"
    ''' <summary>
    ''' Create the new Smart-Thread-Pool instance for this data-browser window.
    ''' </summary>
    Private WithEvents _ThreadPool As New cSmartThreadPoolExtended

    ''' <summary>
    ''' Returns the thread-pool used by this class.
    ''' </summary>
    Public ReadOnly Property ThreadPool As cSmartThreadPoolExtended
        Get
            Return Me._ThreadPool
        End Get
    End Property
#End Region

#Region "Initialization properties"
    ''' <summary>
    ''' Variable that tells, if events should be handled or ignored by the Control.
    ''' </summary>
    Private bReady As Boolean = False

    ''' <summary>
    ''' Variable, that saves the current working directory!
    ''' </summary>
    Private sWorkingDirectory As String

    ''' <summary>
    ''' If list exists and is filled, restricts the file-load from the working directory to just
    ''' the given file names in the working directory.
    ''' </summary>
    Private FileNameFilter As List(Of String)
#End Region

#Region "Timers"
    ''' <summary>
    ''' Timer to check for changes to the folder in the background.
    ''' </summary>
    Private WithEvents timRefreshListTimer As New Timer
#End Region

#Region "File-List Properties and Storage"

    ''' <summary>
    ''' Represents a list-entry.
    ''' </summary>
    Public Class FileListEntry
        Public FileObject As cFileObject
        Public ListEntry As mDataBrowserListEntry = Nothing

        Private _HasBeenSelected As Boolean = False

        ''' <summary>
        ''' Automatically sets the list-entry selection state
        ''' of the control, if there exists a control.
        ''' </summary>
        Public Property HasBeenSelected As Boolean
            Get
                Return Me._HasBeenSelected
            End Get
            Set(value As Boolean)
                If Not Me.ListEntry Is Nothing Then
                    Me.ListEntry.ListEntrySelected = value
                End If
                Me._HasBeenSelected = value
            End Set
        End Property

    End Class

    ''' <summary>
    ''' Currently loaded file-list, as Dictionary of FullPath, FileObject.
    ''' </summary>
    Private FileListDisplayed As New Dictionary(Of String, FileListEntry)

    ''' <summary>
    ''' Returns the list of file names currently displayed in the control.
    ''' </summary>
    Public ReadOnly Property FileObjectListDisplayed As ReadOnlyDictionary(Of String, FileListEntry)
        Get
            Return New ReadOnlyDictionary(Of String, FileListEntry)(Me.FileListDisplayed)
        End Get
    End Property

    ''' <summary>
    ''' Currently loaded file-list.
    ''' Sorted according the actual sorting-settings.
    ''' Filtered according to the actual filter settings.
    ''' </summary>
    Private FileListDisplayed_SortedAndFiltered As New List(Of String)

    ''' <summary>
    ''' Represents a FILO Buffer to recycle not-visible list-entries.
    ''' </summary>
    Private ListEntryBuffer As New Queue(Of String)

    ''' <summary>
    ''' maximum number of list-entry GUI's stored,
    ''' before they get recycled by the FIFO principle
    ''' 
    ''' Multiply with <code>HeightPerListEntry</code> to get the maximum screen height supported.
    ''' 40 * 150 = 6000px at the moment
    ''' </summary>
    Private Const MaxListEntryBufferLength As Integer = 40

    ''' <summary>
    ''' Returns a list with all currently selected file-objects.
    ''' </summary>
    Public Function ListEntriesSelected() As List(Of FileListEntry)
        Return Me.FileListDisplayed.Values.Where(Function(obj) obj.HasBeenSelected).ToList
    End Function

    ''' <summary>
    ''' Returns the selected file-objects.
    ''' </summary>
    Public Function FileObjectsSelected() As List(Of cFileObject)
        Return Me.ListEntriesSelected.ConvertAll(Function(obj) As cFileObject
                                                     Return obj.FileObject
                                                 End Function)
    End Function

#End Region

#Region "Import Workers and the import-class"
    ''' <summary>
    ''' Background-Thread for fetching the files from the directory.
    ''' </summary>
    Private WithEvents oFileBufferFetcher As New System.ComponentModel.BackgroundWorker

    ''' <summary>
    ''' File-importer which loads and identifies all files in the given directory.
    ''' </summary>
    Private oFileImporter As cFileImport

    ''' <summary>
    ''' Delete the cache file generated by the file-importer.
    ''' </summary>
    Public Sub DeleteCacheFile()
        ' Delete cache file
        If System.IO.File.Exists(Me.FileBufferCache_FullPathPlusFile) Then
            Try
                System.IO.File.Delete(Me.FileBufferCache_FullPathPlusFile)
            Catch ex As Exception
                Trace.WriteLine("Could not delete cache file for refresh.")
            End Try
        End If
    End Sub

    ''' <summary>
    ''' Is the control busy in treating data? Don't close it then!!!
    ''' </summary>
    Public ReadOnly Property IsBusy As Boolean
        Get
            Return Me.oFileBufferFetcher.IsBusy
        End Get
    End Property
#End Region

#Region "File Buffer Cache"

    ''' <summary>
    ''' Cache-name to write the file-buffer to.
    ''' </summary>
    Public Const FileBufferCache_FileName As String = "spectrafox.sfc"

    ''' <summary>
    ''' Returns the full cache file path.
    ''' </summary>
    Public ReadOnly Property FileBufferCache_FullPathPlusFile As String
        Get
            Return Me.sWorkingDirectory & System.IO.Path.DirectorySeparatorChar & FileBufferCache_FileName
        End Get
    End Property

    ''' <summary>
    ''' On clicking the refresh-button manually, we force the rescan of the directory,
    ''' even, if a cache-file exists.
    ''' </summary>
    Protected _ForceFileBufferRefresh As Boolean = False

    ''' <summary>
    ''' FileLock for the cache-file, to lock the file, when writing.
    ''' </summary>
    Protected FileBufferCache_FileLock As cFileLock

    ''' <summary>
    ''' Timer to write the cache file to the disk every 10 seconds,
    ''' if the cache has changed.
    ''' </summary>
    Private WithEvents timFileBufferCache_FlushTimer As New Timer

    ''' <summary>
    ''' Marked, if the file-cache has been modified.
    ''' </summary>
    Private FileBufferCache_IsModified As Boolean = False

    ''' <summary>
    ''' Memory-Stream to keep the file-buffer cache in the memory.
    ''' </summary>
    Private FileBufferCache As New IO.MemoryStream

#End Region

#Region "APIs - Interface-Collections"

    ''' <summary>
    ''' List containing all file actions implemented and loaded in the program.
    ''' </summary>
    Private FileActionsAPIList As List(Of iDataBrowser_FileObjectAction) = mDataBrowserList.GetAllFileActions

    ''' <summary>
    ''' Dictionary to get menu-button-clicks access to the base function.
    ''' </summary>
    Private FileActionAPIsToMenuButtons As New Dictionary(Of ToolStripMenuItem, iDataBrowser_FileObjectAction)

    ''' <summary>
    ''' Callback-Function to launch multiple file actions on single file-objects in the thread-pool.
    ''' </summary>
    Private FileActionAPIMultipleFilesIndividual_ProcessCallback As New WorkItemCallback(AddressOf FileActionAPIMultipleFilesIndividual_ProcessWorkerCallback)

    ''' <summary>
    ''' Callback-Function to launch multiple file actions on a list of all file-objects in the thread-pool.
    ''' </summary>
    Private FileActionAPIMultipleFilesAllAtOnce_ProcessCallback As New WorkItemCallback(AddressOf FileActionAPIMultipleFilesAllAtOnce_ProcessWorkerCallback)

    ''' <summary>
    ''' Encapsule the file processing of multiple files in a work-items-group,
    ''' to wait for the group to finish after each action!
    ''' Also we can manage concurrency by this!
    ''' </summary>
    Private WithEvents wigMultipleFileAPIProcessingWorkItemsGroup As IWorkItemsGroup

    ''' <summary>
    ''' Contains the fileobject of the list-entry that has opened the
    ''' context menu by right clicking on it. Nothing, if context-menu closed.
    ''' </summary>
    Private _CurrentContextMenuFileObject As cFileObject

#End Region

#Region "Style settings"

    ''' <summary>
    ''' Height of a list-entry, to be used for the scroll-bar.
    ''' </summary>
    Public Property HeightPerListEntry As Integer = 150

    ''' <summary>
    ''' Determines the distance between list-entries.
    ''' Is important for the style of the list.
    ''' </summary>
    Public Property DistanceBetweenListEntries As Integer = 5

#End Region

#End Region

#Region "Events"

    Private Event ListVisibilityChanged()

    ''' <summary>
    ''' Event raised, if a single spectroscopy-table has been selected.
    ''' </summary>
    Public Event SingleSpectroscopyTableSelected(ByRef SpectroscopyTableFileObject As cFileObject)

    ''' <summary>
    ''' Event raised, if multiple spectroscopy-tables have been selected.
    ''' </summary>
    Public Event MultipleSpectroscopyTableSelected(ByRef SpectroscopyTableFileObjectList As List(Of cFileObject))

    ''' <summary>
    ''' Event raised, if a single scan-image has been selected.
    ''' </summary>
    Public Event SingleScanImageSelected(ByRef ScanImageFileObject As cFileObject)

    ''' <summary>
    ''' Event raised, if multiple scan-images have been selected.
    ''' ----- NOT ALWAYS GETS FIRED -----
    ''' only if the user clicks to show all tables together as preview
    ''' </summary>
    Public Event MultipleScanImagesSelected(ByRef ScanImageFileObjectList As List(Of cFileObject))

    ''' <summary>
    ''' Event raised, if multiple spectroscopy-tables are selected, and the user wants to
    ''' see them all together in the preview-window.
    ''' </summary>
    Public Event MultipleSpectroscopyTableSelectedShowInPreview(ByRef SpectroscopyTableFileObjectList As List(Of cFileObject))

    ''' <summary>
    ''' Event raised, if a single grid file has been selected.
    ''' </summary>
    Public Event SingleGridFileSelected(ByRef GridFileObject As cFileObject)

    ''' <summary>
    ''' Event raised, if multiple scan-images have been selected.
    ''' ----- NOT ALWAYS GETS FIRED -----
    ''' only if the user clicks to show all tables together as preview
    ''' </summary>
    Public Event MultipleGridFilesSelected(ByRef GridFileObjects As List(Of cFileObject))


#End Region

#Region "Enums"

    ''' <summary>
    ''' List of available ToolsMenu categories for multiple selected files.
    ''' If APIs implement tools, they have to specify, where
    ''' there menupoints will appear.
    ''' </summary>
    Public Enum APIMultipleFilesToolsMenuCategories
        None

        SpectroscopyFiles_NoCategory
        SpectroscopyFiles_DataVisualization
        SpectroscopyFiles_DataManipulations
        SpectroscopyFiles_NumericManipulations
        SpectroscopyFiles_AdditionalDataStorage
        SpectroscopyFiles_AtomicForceMicroscopyTools

        ScanImageFiles_NoCategory
        ScanImageFiles_AdditionalDataStorage
    End Enum


    ''' <summary>
    ''' List of available ToolsMenu categories in the context-menu for single files.
    ''' If APIs implement tools, they have to specify, where
    ''' there menupoints will appear
    ''' </summary>
    Public Enum APISingleFileToolsMenuCategories
        None

        SpectroscopyFiles_NoCategory
        SpectroscopyFiles_DataManipulations
        SpectroscopyFiles_NumericManipulations
        SpectroscopyFiles_AtomicForceMicroscopyTools
    End Enum

#End Region

#Region "Constructor"
    ''' <summary>
    ''' Constructor expects to get the path of the folder to observe.
    ''' </summary>
    Public Sub New(ByVal FolderPath As String,
                   ByRef HostingParentForm As Form,
                   Optional ByVal FileNameFilter As List(Of String) = Nothing)

        ' Dieser Aufruf ist für den Designer erforderlich.
        InitializeComponent()

        ' Add the parentwindow reference.
        Me.panBrowserListContainer.ParentWindowHandle = HostingParentForm.Handle
        Me.ActiveControl = Me.panBrowserListContainer

        ' Initialize the automatic folder check timer:
        Me.timRefreshListTimer.Interval = 1000
        Me.RefreshTimerCountInSeconds = 0
        Me._RefreshTimerCountInSeconds = My.Settings.DataBrowserFileList_RefreshTimer
        Me.mnuTimerConfig_RefreshTime.Text = Me._RefreshTimerCountInSeconds.ToString("N0")

        ' copy the initialization variables
        Me.sWorkingDirectory = FolderPath
        Me.FileNameFilter = FileNameFilter

        ' Initialize the cache-flush timer
        Me.timFileBufferCache_FlushTimer.Interval = 300000 ' 30000 = 5 * 60 * 1000 = 5 min
        Me.timFileBufferCache_FlushTimer.Start()

        ' Restore some settings
        With My.Settings
            Me.mnuTools_PlotSpectraTogetherAutomatic.Checked = .DataBrowserList_PlotSelectedSpectraTogetherAutomatic
        End With

        ' load the filter history
        Me.UpdateFilterHistory()

        '########################
        ' FILE BUFFER
        ' Add adresses to the File-Buffer Fetcher
        Me.oFileBufferFetcher.WorkerSupportsCancellation = True
        Me.oFileBufferFetcher.WorkerReportsProgress = True
        ' END FILE BUFFER
        '########################

        ' Setup all the FileActionMenuButtons for the file-action-APIs
        Try
            For i As Integer = 0 To Me.FileActionsAPIList.Count - 1 Step 1

                '#############################
                ' Setup single file actions
                If FileActionsAPIList(i).CanHandleSingleFileObjects Then

                    ' Setup menu item (style) and add it to the menu.
                    Dim MI As ToolStripMenuItem = FileActionsAPIList(i).SingleFileActionMenuItem
                    Select Case FileActionsAPIList(i).CategoryOfSingleFileActionMenu
                        Case APISingleFileToolsMenuCategories.None
                            Continue For

                        Case APISingleFileToolsMenuCategories.SpectroscopyFiles_NoCategory
                            Me.cmSpectroscopyFile.Items.Add(MI)
                        Case APISingleFileToolsMenuCategories.SpectroscopyFiles_DataManipulations
                            Me.cmnuSpectroscopy_DataManipulations.DropDownItems.Add(MI)
                        Case APISingleFileToolsMenuCategories.SpectroscopyFiles_NumericManipulations
                            Me.cmnuSpectroscopy_NumericManipulations.DropDownItems.Add(MI)
                        Case APISingleFileToolsMenuCategories.SpectroscopyFiles_AtomicForceMicroscopyTools
                            Me.cmnuSpectroscopy_AtomicForceMicroscopyTools.DropDownItems.Add(MI)

                    End Select

                    ' link the button to the tooltip
                    'Me.ttToolTip.SetToolTip(MI, FileActionsAPIList(i).MultipleFileActionMenuItemToolTip)

                    ' Add the click-action
                    Me.FileActionAPIsToMenuButtons.Add(MI, FileActionsAPIList(i))
                    AddHandler MI.Click, AddressOf SingleFileMenuItemAPIClick
                End If

                '#############################
                ' Setup multiple file actions
                If FileActionsAPIList(i).CanHandleMultipleFileObjects Then

                    ' Setup menu item (style) and add it to the menu.
                    Dim MI As ToolStripMenuItem = FileActionsAPIList(i).MultipleFileActionMenuItem
                    Select Case FileActionsAPIList(i).CategoryOfMultipleFileActionMenu
                        Case APIMultipleFilesToolsMenuCategories.None
                            Continue For

                        Case APIMultipleFilesToolsMenuCategories.SpectroscopyFiles_NoCategory
                            Me.mnuMultipleSpectroscopyFileActions.DropDownItems.Add(MI)
                        Case APIMultipleFilesToolsMenuCategories.SpectroscopyFiles_DataManipulations
                            Me.mnuTools_DataManipulations.DropDownItems.Add(MI)
                        Case APIMultipleFilesToolsMenuCategories.SpectroscopyFiles_DataVisualization
                            Me.mnuTools_Visualization.DropDownItems.Add(MI)
                        Case APIMultipleFilesToolsMenuCategories.SpectroscopyFiles_NumericManipulations
                            Me.mnuTools_NumericManipulations.DropDownItems.Add(MI)
                        Case APIMultipleFilesToolsMenuCategories.SpectroscopyFiles_AdditionalDataStorage
                            Me.mnuTools_SpectroscopyDataCache.DropDownItems.Add(MI)
                        Case APIMultipleFilesToolsMenuCategories.SpectroscopyFiles_AtomicForceMicroscopyTools
                            Me.mnuTools_AtomicForceMicroscopyTools.DropDownItems.Add(MI)

                        Case APIMultipleFilesToolsMenuCategories.ScanImageFiles_NoCategory
                            Me.mnuMultipleScanImageFileActions.DropDownItems.Add(MI)
                        Case APIMultipleFilesToolsMenuCategories.ScanImageFiles_AdditionalDataStorage
                            Me.mnuTools_ScanImageDataCache.DropDownItems.Add(MI)
                    End Select

                    ' link the button to the tooltip
                    'Me.ttToolTip.SetToolTip(MI, FileActionsAPIList(i).MultipleFileActionMenuItemToolTip)

                    ' Add the click-action
                    Me.FileActionAPIsToMenuButtons.Add(MI, FileActionsAPIList(i))
                    AddHandler MI.Click, AddressOf MultipleFileMenuItemAPIClick
                End If

            Next
        Catch ex As Exception
        End Try


        ' Apply the last settings
        With My.Settings

            ' Sorting
            Try
                Me.SetSortDirection(CType(.DataBrowserList_LastSortingDirection, SortOrder))
                Me.SetSortFieldBy(CType(.DataBrowserList_LastSortingField, SortFields))
            Catch ex As Exception
            End Try

            ' Preview-images
            Me._CurrentPreviewImageSettings = New PreviewImageSettings
            Me._CurrentPreviewImageSettings.ScanImage_Channel = .LastPreviewImageList_ChannelName
            Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_1st = .LastPreviewImageList_ColumnNameX
            Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_2nd = .LastPreviewImageList_ColumnNameX_2nd
            Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_3rd = .LastPreviewImageList_ColumnNameX_3rd
            Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_1st = .LastPreviewImageList_ColumnNameY
            Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_2nd = .LastPreviewImageList_ColumnNameY_2nd
            Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_3rd = .LastPreviewImageList_ColumnNameY_3rd
            Me._CurrentPreviewImageSettings.SpectroscopyTable_LogX = .ListPreviewImage_LogX
            Me._CurrentPreviewImageSettings.SpectroscopyTable_LogY = .ListPreviewImage_LogY
            Me._CurrentPreviewImageSettings.SpectroscopyTable_EnablePointReduction = .ListPreviewImage_ReducePoints

        End With

        ' Set "Refresh-List"-Button to "Refresh"
        Me.SetInterfaceToLoadingListModus(False)

        ' hide the progress bar
        Me.panProgress.Visible = False

        '##############################################
        ' Load the file-list
        Me.GetCurrentFileList()

        ' Set the window to ready!
        Me.bReady = True
    End Sub
#End Region

#Region "Destructor"

    ''' <summary>
    ''' DESTRUCTOR
    ''' </summary>
    Private Sub UserControl_Disposed(sender As Object, e As EventArgs) Handles MyBase.Disposed

        ' Remove the filter history buttons.
        With Me.mnuFilter_FilterHistory
            ' remove the handlers
            For i As Integer = 0 To .DropDownItems.Count - 1 Step 1
                RemoveHandler .DropDownItems(i).Click, AddressOf Me.SelectFilterFromHistory
            Next

            ' remove the old buttons
            .DropDownItems.Clear()
        End With

        ' Remove all the events of the tool-strip-buttons.
        For Each B As ToolStripMenuItem In Me.FileActionAPIsToMenuButtons.Keys
            RemoveHandler B.Click, AddressOf SingleFileMenuItemAPIClick
            RemoveHandler B.Click, AddressOf MultipleFileMenuItemAPIClick
        Next

        ' Remove all the events of the list-entries
        For Each ListEntry In Me.FileListDisplayed.Values
            If ListEntry.ListEntry IsNot Nothing Then
                Me.ConnectListEntryHandlers(ListEntry.ListEntry, False)
            End If
        Next
        Me.FileListDisplayed.Clear()
        Me.FileListDisplayed = Nothing

        ' Remove all the timers
        Me.timFileBufferCache_FlushTimer.Stop()
        Me.timFileBufferCache_FlushTimer.Dispose()
        Me.timRefreshListTimer.Stop()
        Me.timRefreshListTimer.Dispose()
        Me.timAutomaticScrollTimer.Stop()
        Me.timAutomaticScrollTimer.Dispose()

        ' Write finally the file-buffer to the disk
        Me.FlushFileCacheToDisk(True)

        ' Release streams
        Me.FileBufferCache.Close()
        Me.FileBufferCache.Dispose()
        Me.FileBufferCache = Nothing

        ' Clear the file buffer
        Me.oFileImporter.Dispose()
        Me.oFileImporter = Nothing

    End Sub

#End Region

#Region "Get File List and File Buffer Fetcher"

    ''' <summary>
    ''' Initialize a List-Refresh by the Button-Click, if the selected working directory exists.
    ''' </summary>
    Private Sub btnRefreshList_Click(sender As System.Object, e As System.EventArgs) Handles mnuRefreshList.Click
        ' If the Worker is Not Working: Start it.
        ' Otherwise act as Cancel-Button to Quit the Worker.
        If Me.oFileBufferFetcher.IsBusy Then
            'Me.oFileImporter.CancelRunningSTPFileBufferCreation()
            Me.oFileBufferFetcher.CancelAsync()
        Else
            If IO.Directory.Exists(Me.sWorkingDirectory) Then
                Me._ForceFileBufferRefresh = True
                Me.GetCurrentFileList()
            End If
        End If
    End Sub

    ''' <summary>
    ''' Loads the File-List for the current folder!
    ''' </summary>
    Public Sub GetCurrentFileList()
        ' Set "Refresh-List"-Button to "Cancel"
        Me.SetInterfaceToLoadingListModus(True)

        ' Reset the search
        Me.LastSearchedNameHighlighted = String.Empty

        ' Makes the Progress-Bar and Text visible again.
        Me.lblStatus.Text = String.Empty

        ' Start the File-Buffer-Fetcher.
        If Not oFileBufferFetcher.IsBusy Then Me.oFileBufferFetcher.RunWorkerAsync()
    End Sub

    ''' <summary>
    ''' Fetches all the Files with their Contents from the Working-Directory.
    ''' </summary>
    Private Sub FileBufferFetcher_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles oFileBufferFetcher.DoWork

        ' Create new File-Importer-Object.
        Me.oFileImporter = New cFileImport

        ' Set the file-name filter
        Me.oFileImporter.FileNameFilterToInclude = Me.FileNameFilter

        ' Scan actually the whole directory?
        Dim ScanWholeDirectory As Boolean = False

        ' Check, if the cache file exists, if yes, then load it, instead of fetching all files again!
        If IO.File.Exists(Me.FileBufferCache_FullPathPlusFile) Then

            Me.oFileImporter.GetFileBufferFromFile(Me.FileBufferCache_FullPathPlusFile, Me.oFileBufferFetcher)

            ' If we force a refresh, then we should still scan the whole directory,
            ' and merge the cache file with the scan.
            If Me._ForceFileBufferRefresh Then
                ScanWholeDirectory = True
                Me._ForceFileBufferRefresh = False
            End If

        Else
            ScanWholeDirectory = True
        End If

        ' Shall we scan the whole directory?
        If ScanWholeDirectory Then

            ' Scan the Directory and Create a FileBuffer.
            Me.oFileImporter.CreateFileBuffer(Me.sWorkingDirectory,
                                              Me.oFileBufferFetcher)

            ' Write the fetched file-buffer as cache file into the memory.
            Me.SaveFileBuffer()

        End If

    End Sub

    ''' <summary>
    ''' Save the current list of file-objects to the file-buffer.
    ''' </summary>
    Private Sub SaveFileBuffer()
        ' Go to the beginning of the stream.
        Me.FileBufferCache.Close()
        Me.FileBufferCache.Dispose()
        Me.FileBufferCache = New MemoryStream
        Me.oFileImporter.WriteFileBufferToStream(Me.FileBufferCache)
        Me.FileBufferCache_IsModified = True
    End Sub

    ''' <summary>
    ''' Writes the current file-cache file to the disk.
    ''' </summary>
    Public Sub FlushFileCacheToDisk(Optional ByVal Force As Boolean = False)
        ' First create the file-buffer in the memory.
        Me.SaveFileBuffer()

        If Not Me.FileBufferCache_IsModified And Not Force Then Return

        ' Only write file buffer, if we have some files in the buffer.
        If Me.oFileImporter.FileBuffer_Full.Count <= 0 Then Return

        ' Write the fetched file-buffer as cache file to the disk.
        Me.FileBufferCache_FileLock = New cFileLock(Me.FileBufferCache_FullPathPlusFile, TimeSpan.FromMinutes(1))
        If Me.FileBufferCache_FileLock.GetFileLockOrWait() Then

            ' Write the buffer as a file
            Me.oFileImporter.WriteFileBufferAsFile(Me.FileBufferCache_FullPathPlusFile)

            ' Mark the memory-stream as unchanged.
            Me.FileBufferCache_IsModified = False

            ' Release the file lock
            Me.FileBufferCache_FileLock.ReleaseLock()

        End If
    End Sub

    ''' <summary>
    ''' Flushes the File-cache to the disk. Not forcable.
    ''' </summary>
    Private Sub FlushFileCacheToDisk() Handles timFileBufferCache_FlushTimer.Tick
        Me.FlushFileCacheToDisk(False)
    End Sub

    ''' <summary>
    ''' If the whole File-Buffer got fetched, this function initializes the filtering
    ''' and fills the DataGridView
    ''' </summary>
    Private Sub FileBufferFetcher_AllComplete(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles oFileBufferFetcher.RunWorkerCompleted
        Me.bReady = False

        ' Clear the sorted File-List, to request a resort!
        Me.FileListDisplayed_SortedAndFiltered.Clear()

        ' Take the current File-List and compare it to the new one.
        ' If new elements are discovered, add them at the end!
        ' If elements vanished, then remove them!
        ' If old elements have changed, reload them!

        ' Check for vanished elements!
        Dim lVanishedElements As New List(Of String)
        For Each OldFileBufferNames As String In Me.FileListDisplayed.Keys

            ' Search the old element!
            ' If we don't find it, mark it for removal!
            If Not Me.oFileImporter.FileBuffer_Filtered.ContainsKey(OldFileBufferNames) Then
                lVanishedElements.Add(OldFileBufferNames)
            End If

        Next

        ' Now remove all vanished elements!
        For Each VanishedName As String In lVanishedElements
            With Me.FileListDisplayed
                With .Item(VanishedName)
                    If Not .ListEntry Is Nothing Then
                        Me.ConnectListEntryHandlers(.ListEntry, False)
                        .ListEntry.Dispose()
                        .ListEntry = Nothing
                    End If
                End With
                .Remove(VanishedName)
            End With

        Next

        ' Check for new elements!
        For Each NewFileBufferElement As KeyValuePair(Of String, cFileObject) In Me.oFileImporter.FileBuffer_Filtered

            If Me.FileListDisplayed.ContainsKey(NewFileBufferElement.Key) Then

                ' Old element discovered! 
                ' Just Update, If the file has changed since the last refresh!
                With Me.FileListDisplayed(NewFileBufferElement.Key)
                    If .FileObject.LastFileChange <> NewFileBufferElement.Value.LastFileChange Then
                        .FileObject = NewFileBufferElement.Value
                        If Not .ListEntry Is Nothing Then
                            .ListEntry.SetFileObject(.FileObject)
                        End If
                    End If
                End With

            Else

                ' New element discovered!
                ' Add the new element at the end of the displayed list!
                Dim NewLE As New FileListEntry
                NewLE.FileObject = NewFileBufferElement.Value
                Me.FileListDisplayed.Add(NewFileBufferElement.Key, NewLE)

            End If
        Next

        ' Sort the file-objects by the selected sorting algorithm
        Me.SortAndFilterFileListUsingCurrentSettings()

        '############################################
        Me.lblStatus.Text = My.Resources.rDataBrowser.StatusText_Ready

        ' Set "Refresh-List"-Button to "Refresh"
        Me.SetInterfaceToLoadingListModus(False)

        ' Activate Handlers
        Me.bReady = True

        ' Initialize the repainting of the current list-entry view.
        RaiseEvent ListVisibilityChanged()
    End Sub

    ''' <summary>
    ''' Function for reporting the progress of the File-Fetching to the User.
    ''' </summary>
    Private Sub FileBufferFetcher_ReportProgress(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles oFileBufferFetcher.ProgressChanged
        Me.lblStatus.Text = "(" & e.ProgressPercentage.ToString("N0") & " %) " & Convert.ToString(e.UserState)

    End Sub

#End Region

#Region "Sorting of the file-object list"

    ''' <summary>
    ''' Current Sort-Direction of the List
    ''' </summary>
    Private _SortDirection As SortOrder = SortOrder.Ascending

    ''' <summary>
    ''' File-Object fields for which the entries can be sorted.
    ''' </summary>
    Private Enum SortFields
        FileTime
        FileName
        RecordTime
        IsSelected
    End Enum

    ''' <summary>
    ''' Current ColumnIndex that is used to sort the list.
    ''' </summary>
    Private _SortField As SortFields = SortFields.FileTime

    ''' <summary>
    ''' Uses the current settings to sort the <code>DisplayedFileList</code>
    ''' by a certain column. ASC or DESC.
    ''' </summary>
    Private Sub SortAndFilterFileListUsingCurrentSettings()
        Dim SortedFileObjects As List(Of FileListEntry) = Me.FileListDisplayed.Values.ToList

        '################################################
        '
        '                  FILTERING
        '
        '################################################

        ' First filter the values for the file-type.
        If Not Me.mnuFilter_ShowDataTableFiles.Checked Then
            SortedFileObjects = SortedFileObjects.Where(Function(obj) obj.FileObject.FileType <> cFileObject.FileTypes.SpectroscopyTable).ToList
        End If
        If Not Me.mnuFilter_ShowScanImageFiles.Checked Then
            SortedFileObjects = SortedFileObjects.Where(Function(obj) obj.FileObject.FileType <> cFileObject.FileTypes.ScanImage).ToList
        End If
        If Not Me.mnuFilter_ShowGridFiles.Checked Then
            SortedFileObjects = SortedFileObjects.Where(Function(obj) obj.FileObject.FileType <> cFileObject.FileTypes.GridFile).ToList
        End If

        ' Second filter the values for the file-name using the current settings
        Dim CurrentFileNameFilter As String = Me.mnuFilter_FilterText.Text.Trim
        If Not CurrentFileNameFilter = String.Empty Then
            SortedFileObjects = SortedFileObjects.Where(Function(obj) Me.IsFileNameInFilter(CurrentFileNameFilter, obj.FileObject.FileNameWithoutPath)).ToList
        End If


        '################################################
        '
        '                  SORTING
        '
        '################################################

        ' Sorting ASC of the List
        Select Case Me._SortField
            Case SortFields.FileName
                SortedFileObjects = SortedFileObjects.OrderBy(Function(obj) obj.FileObject.FileNameWithoutPath).ToList
            Case SortFields.FileTime
                SortedFileObjects = SortedFileObjects.OrderBy(Function(obj) obj.FileObject.LastFileChange).ToList
            Case SortFields.RecordTime
                SortedFileObjects = SortedFileObjects.OrderBy(Function(obj) obj.FileObject.RecordDate).ToList
            Case SortFields.IsSelected
                SortedFileObjects = SortedFileObjects.OrderBy(Function(obj) Not obj.HasBeenSelected).ToList
        End Select

        ' Sorting DESC -> Reverse the list
        If Me._SortDirection = SortOrder.Descending Then
            SortedFileObjects.Reverse()
        End If

        '##########################################
        ' Remove all the displayed list-entries
        'Me.panBrowserList.Controls.Clear()
        Me.panBrowserList.ClearControls()
        ' Clear all the loaded list-entries
        While Me.ListEntryBuffer.Count > 0

            ' List-Entry vanished.
            If Me.FileListDisplayed.ContainsKey(Me.ListEntryBuffer.Peek) Then
                Me.FileListDisplayed(Me.ListEntryBuffer.Peek).ListEntry.Dispose()
                Me.FileListDisplayed(Me.ListEntryBuffer.Dequeue).ListEntry = Nothing
            Else
                Me.ListEntryBuffer.Dequeue()
            End If
        End While
        '##########################################

        ' Set the sorted File-List
        Me.FileListDisplayed_SortedAndFiltered.Clear()
        For i As Integer = 0 To SortedFileObjects.Count - 1 Step 1
            Me.FileListDisplayed_SortedAndFiltered.Add(SortedFileObjects(i).FileObject.FullFileNameInclPath)
        Next

        ' Set the scrollbar and container height:
        'Me.panBrowserList.VirtualHeightOfThePanel = Me.HeightPerListEntry * Me.FileListDisplayed.Count
        Me.panBrowserList.VirtualHeightOfThePanel = Me.HeightPerListEntry * Me.FileListDisplayed_SortedAndFiltered.Count
        Me.panBrowserList.Size = Me.panBrowserListContainer.Size
        Me.vListScroll.Maximum = Me.panBrowserList.VirtualHeightOfThePanel - Me.HeightPerListEntry

        ' Initialize the repainting of the current list-entry view.
        RaiseEvent ListVisibilityChanged()
        'Me.VisibilityOfTheListEntriesChange()
    End Sub

    ''' <summary>
    ''' Change the sort direction by selecting a different order in the menu.
    ''' </summary>
    Private Sub mnuSort_ASC_DESC_Click(sender As Object, e As EventArgs) Handles mnuSort_ASC.Click, mnuSort_DESC.Click
        If sender Is mnuSort_ASC And Not mnuSort_ASC.Checked Then
            Me.SetSortDirection(SortOrder.Ascending)
        ElseIf sender Is mnuSort_DESC And Not mnuSort_DESC.Checked Then
            Me.SetSortDirection(SortOrder.Descending)
        End If
    End Sub

    ''' <summary>
    ''' Sets the sort-direction of the list.
    ''' </summary>
    Private Sub SetSortDirection(Direction As SortOrder)
        If Direction = SortOrder.None Then Direction = SortOrder.Descending
        ' Change the menu-item-check-states
        mnuSort_ASC.Checked = Direction = SortOrder.Ascending
        mnuSort_DESC.Checked = Direction = SortOrder.Descending

        ' Save the settings for the next time:
        My.Settings.DataBrowserList_LastSortingDirection = Direction
        'cGlobal.SaveSettings()

        ' Sort
        Me._SortDirection = Direction
        Me.SortAndFilterFileListUsingCurrentSettings()
    End Sub

    ''' <summary>
    ''' Change the data for which the we sort the list.
    ''' </summary>
    Private Sub SortDataBy_Click(sender As Object, e As EventArgs) _
        Handles mnuSort_ByRecordDate.Click, mnuSort_ByFileName.Click, mnuSort_ByFileDate.Click, mnuSort_BySelection.Click

        ' Set the new check-states of the buttons.
        If sender Is mnuSort_ByFileDate Then Me.SetSortFieldBy(SortFields.FileTime)
        If sender Is mnuSort_ByFileName Then Me.SetSortFieldBy(SortFields.FileName)
        If sender Is mnuSort_ByRecordDate Then Me.SetSortFieldBy(SortFields.RecordTime)
        If sender Is mnuSort_BySelection Then Me.SetSortFieldBy(SortFields.IsSelected)

    End Sub

    ''' <summary>
    ''' Changes the sorting of the list,
    ''' and adapts the menu.
    ''' </summary>
    Private Sub SetSortFieldBy(SortBy As SortFields)
        ' Set the new check-states of the buttons.
        Me.mnuSort_ByFileDate.Checked = SortBy = SortFields.FileTime
        Me.mnuSort_ByFileName.Checked = SortBy = SortFields.FileName
        Me.mnuSort_ByRecordDate.Checked = SortBy = SortFields.RecordTime
        Me.mnuSort_BySelection.Checked = SortBy = SortFields.IsSelected

        ' Save the settings for the next time:
        My.Settings.DataBrowserList_LastSortingField = SortBy
        cGlobal.SaveSettings()

        ' Change the sorting
        Me._SortField = SortBy
        Me.SortAndFilterFileListUsingCurrentSettings()
    End Sub

    ''' <summary>
    ''' Set list-filters by file-type.
    ''' </summary>
    Private Sub mnuFilter_FileTypeFilter_Click(sender As Object, e As EventArgs) Handles mnuFilter_ShowScanImageFiles.Click, mnuFilter_ShowDataTableFiles.Click, mnuFilter_ShowGridFiles.Click

        If sender Is mnuFilter_ShowDataTableFiles Then mnuFilter_ShowDataTableFiles.Checked = Not mnuFilter_ShowDataTableFiles.Checked
        If sender Is mnuFilter_ShowScanImageFiles Then mnuFilter_ShowScanImageFiles.Checked = Not mnuFilter_ShowScanImageFiles.Checked
        If sender Is mnuFilter_ShowGridFiles Then mnuFilter_ShowGridFiles.Checked = Not mnuFilter_ShowGridFiles.Checked

        Me.SortAndFilterFileListUsingCurrentSettings()

    End Sub

#End Region

#Region "Dynamic painting the list entries by catching the paint-event."
    ''' <summary>
    ''' Catch the paint event of the container,
    ''' to get the new visibility status of the list-entries.
    ''' </summary>
    Public Sub VisibilityOfTheListEntriesChange() Handles Me.ListVisibilityChanged, panBrowserList.Resize

        ' Get temporary properties about the
        ' current scroll position, and the shown
        ' screen space.
        'Dim ScrollOffset As Integer = Me.panBrowserList.Location.Y
        Dim ScrollOffset As Integer = Me.panBrowserList.ScrollOffset - 3 * Me.HeightPerListEntry
        If ScrollOffset < 0 Then ScrollOffset = 0
        Dim VisibleHeight As Integer = Me.panBrowserListContainer.Height + 3 * Me.HeightPerListEntry

        ' Calculate how many list-entries are visible so far above the visible region:
        Dim ListEntriesAboveVisibleRegion As Integer = Math.Abs(ScrollOffset \ Me.HeightPerListEntry)

        ' Calculate how many list-entries have to be shown.
        Dim ListEntriesToBeShown As Integer = (VisibleHeight \ Me.HeightPerListEntry)

        'Debug.WriteLine("TRACE: ListEntriesShown: " & ListEntriesToBeShown & ", ListEntriesAbove: " & ListEntriesAboveVisibleRegion)

        ' Just add the amount of visible list-entries,
        ' matching into the visible region of the panel
        Try

            For i As Integer = 0 To Me.FileListDisplayed_SortedAndFiltered.Count - 1 Step 1

                If i >= ListEntriesAboveVisibleRegion - 1 And
                    i <= (ListEntriesAboveVisibleRegion + ListEntriesToBeShown + 1) Then
                    ' VISIBLE
                    '#########

                    Dim ListEntry As mDataBrowserListEntry
                    If Not Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(i)).ListEntry Is Nothing Then
                        ' Entry found
                        ' So get the loaded list-entry object
                        ListEntry = Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(i)).ListEntry

                        ' Check list-entry location
                        Me.panBrowserList.ChangeControlLocation(ListEntry, GetListEntryLocationByIndex(i))
                    Else
                        ' no existing entry found, so create a new list-entry,
                        ' or recycle old entries by the FIFO principle.

                        ' Create the new list-entry for each file-object
                        ListEntry = Me.GetListEntryFromBufferFIFO(Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(i)),
                                                                  GetListEntryLocationByIndex(i))
                    End If

                    ' Continue message filtering
                    ListEntry.SuspendMessageFiltering = False
                Else
                    ' INVISIBLE
                    '###########

                    ' Stop message-filtering here
                    If Not Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(i)).ListEntry Is Nothing Then
                        Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(i)).ListEntry.SuspendMessageFiltering = True
                    End If

                End If
            Next
        Catch ex As Exception
            Debug.WriteLine("ERROR IN wDataBrowserList.VisiblityChanged: " & ex.Message)
        Finally
            ' Always reposition the controls!
            Me.panBrowserList.RepositionControls()
        End Try
    End Sub

    ''' <summary>
    ''' create a new list-entry, or take the oldest one from the buffer,
    ''' and recycle it by the FIFO principle.
    ''' </summary>
    Private Function GetListEntryFromBufferFIFO(ByRef ParentFileListEntry As FileListEntry,
                                                ByVal NewLocation As Point) As mDataBrowserListEntry
        Dim ListEntry As mDataBrowserListEntry

        ' Check, if the Parent file-list-entry has already a list-entry GUI
        If Not ParentFileListEntry.ListEntry Is Nothing Then Return ParentFileListEntry.ListEntry

        ' Check the FIFO buffer:
        If Me.ListEntryBuffer.Count <= MaxListEntryBufferLength Then
            ' buffer still has some storage free,
            ' so create new list-entry, and push the the parent file-name
            ' to the FIFO list.
            ListEntry = New mDataBrowserListEntry(Me._ThreadPool,
                                                  Me.FileActionsAPIList,
                                                  Me._CurrentPreviewImageSettings,
                                                  Me.panBrowserListContainer.ParentWindowHandle)
            Me.ListEntryBuffer.Enqueue(ParentFileListEntry.FileObject.FullFileNameInclPath)

            ' Set the properties of the new list-entry.
            ListEntry.Height = Me.HeightPerListEntry
            ListEntry.Location = NewLocation

            ' Connect handlers for new entry
            Me.ConnectListEntryHandlers(ListEntry, True)

            ' Add to the list at the specified location
            Me.panBrowserList.AddControl(ListEntry, False)

            ' Debug-Output
            'Debug.WriteLine("TRACE: mDataBrowserList.GetListEntryFromBufferFIFO: new ListEntry created " & ParentFileListEntry.FileObject.FileName)
        Else
            ' buffer is full, so take the oldest element from the buffer,
            ' deconnect the list-entry storage, and connect the element to the new one.

            ' Remove buffer and clear last entry from the list
            ListEntry = Me.FileListDisplayed(Me.ListEntryBuffer.Peek).ListEntry
            Me.FileListDisplayed(Me.ListEntryBuffer.Dequeue).ListEntry = Nothing

            ' queue with the new name
            Me.ListEntryBuffer.Enqueue(ParentFileListEntry.FileObject.FullFileNameInclPath)

            ' Modify the location of the list-entry
            Me.panBrowserList.ChangeControlLocation(ListEntry, NewLocation)

            ' Debug-Output
            'Debug.WriteLine("TRACE: mDataBrowserList.GetListEntryFromBufferFIFO: FIFO recycling " & ParentFileListEntry.FileObject.FileName)
        End If

        ' Set the selection state:
        ListEntry.ListEntrySelected = ParentFileListEntry.HasBeenSelected

        ' Set the new file-object, and load the data
        ParentFileListEntry.ListEntry = ListEntry
        ListEntry.SetFileObject(ParentFileListEntry.FileObject)

        Return ListEntry
    End Function

    ''' <summary>
    ''' Returns the theoretic list-entry location, given by the sorted index of the list-entry.
    ''' </summary>
    Public Function GetListEntryLocationByIndex(Index As Integer) As Point
        Return New Point(3, Me.HeightPerListEntry * Index)
    End Function

    ''' <summary>
    ''' Function, that generates the handler-connections to the list-entries,
    ''' and removes them, if ConnectOrDisconnect is set to false.
    ''' </summary>
    Private Sub ConnectListEntryHandlers(ByRef ListEntry As mDataBrowserListEntry,
                                         ByVal ConnectOrDisconnect As Boolean)
        If ConnectOrDisconnect Then
            AddHandler ListEntry.ListEntryFetched, AddressOf Me.OnListEntryFetched
            AddHandler ListEntry.ListEntryClicked, AddressOf Me.OnListEntryClicked
            AddHandler ListEntry.ListEntryRightClicked, AddressOf Me.OnListEntryRightClicked
        Else
            RemoveHandler ListEntry.ListEntryFetched, AddressOf Me.OnListEntryFetched
            RemoveHandler ListEntry.ListEntryClicked, AddressOf Me.OnListEntryClicked
            RemoveHandler ListEntry.ListEntryRightClicked, AddressOf Me.OnListEntryRightClicked
        End If
    End Sub

#End Region

#Region "Scrolling of the list"
    ''' <summary>
    ''' Scrolls the list by a certain amount.
    ''' </summary>
    Public Sub ScrollList(ByVal ScrollDistance As Integer,
                           Optional ByVal Relative As Boolean = True)

        ' close all context-menus if scrolling
        Me.cmSpectroscopyFile.Close()
        Me.cmScanImageFile.Close()

        ' Scroll to new position
        Dim NewYOffset As Integer
        If Relative Then
            'NewYOffset = Me.panBrowserList.Location.Y + ScrollDistance
            NewYOffset = Me.panBrowserList.ScrollOffset - ScrollDistance
        Else
            NewYOffset = ScrollDistance
        End If

        ' Check, if position is valid!
        If NewYOffset >= Me.panBrowserList.VirtualHeightOfThePanel Then
            NewYOffset = Me.vListScroll.Maximum
        ElseIf NewYOffset <= 0 Then
            NewYOffset = 0
        End If
        'Me.panBrowserList.Location = New Point(0, NewYOffset)
        Me.panBrowserList.ScrollOffset = NewYOffset
        If Me.vListScroll.Maximum >= NewYOffset Then
            Me.vListScroll.Value = NewYOffset
        Else
            Me.vListScroll.Value = Me.vListScroll.Maximum
        End If

        ' Initialize the repainting of the current list-entry view.
        RaiseEvent ListVisibilityChanged()
        'Me.VisibilityOfTheListEntriesChange()
    End Sub

    ''' <summary>
    ''' Scrolling of the list via the scroll-bar.
    ''' </summary>
    Private Sub vListScroll_Scroll(sender As Object, e As ScrollEventArgs) Handles vListScroll.Scroll
        If e.ScrollOrientation = ScrollOrientation.VerticalScroll Then
            Me.ScrollList(Me.vListScroll.Value, False)
        End If
    End Sub

    ''' <summary>
    ''' Scrolling of the list via the mouse-wheel.
    ''' </summary>
    Private Sub panBrowserListContainer_MouseWheel(sender As Object, e As MouseEventArgs) Handles panBrowserListContainer.ScrollMouseWheel
        Me.ScrollList(e.Delta)
    End Sub

    ''' <summary>
    ''' Scrolls the list to the given file-object, if it is displayed as list-entry..
    ''' </summary>
    Public Sub ScrollToListEntry(ByRef FileObject As cFileObject)
        If Me.FileListDisplayed_SortedAndFiltered.Contains(FileObject.FullFileNameInclPath) Then
            ' Go to the theoretic position.
            Me.ScrollList(Me.GetListEntryLocationByIndex(Me.FileListDisplayed_SortedAndFiltered.IndexOf(FileObject.FullFileNameInclPath)).Y, False)
        End If
    End Sub

    ''' <summary>
    ''' Timer, to scroll automatically.
    ''' </summary>
    Private WithEvents timAutomaticScrollTimer As New Timer

    ''' <summary>
    ''' Amount to scroll automatically.
    ''' </summary>
    Private iAutoScrollByAmount As Integer = 0

    ''' <summary>
    ''' Activates the auto-scroll-timer and scrolls by the given amount
    ''' </summary>
    Private Property AutoScrollByAmount As Integer
        Get
            Return Me.iAutoScrollByAmount
        End Get
        Set(value As Integer)
            If value = 0 Then
                If Me.timAutomaticScrollTimer.Enabled Then
                    Me.timAutomaticScrollTimer.Stop()
                End If
            Else
                Me.timAutomaticScrollTimer.Stop()
                Me.timAutomaticScrollTimer.Interval = 30
                Me.timAutomaticScrollTimer.Start()
            End If
            Me.iAutoScrollByAmount = value
        End Set
    End Property

    ''' <summary>
    ''' Automatic scrolling of the list, on holding the left mouse button,
    ''' and entering the scroll areas.
    ''' </summary>
    Private Sub panAutoUpScrollingOnTouch_MouseEnter_PanelArea(sender As Object, e As EventArgs)
        'With Me.panAutoUpScrollingOnTouch
        '    If .MB.CurrentMouseButtons = Windows.Forms.MouseButtons.Left Then
        '        Me.AutoScrollByAmount = (.Height - .PointToClient(MousePosition).Y)
        '    Else
        '        Me.AutoScrollByAmount = 0
        '    End If
        'End With
    End Sub

    ''' <summary>
    ''' Automatic scrolling of the list, on holding the left mouse button,
    ''' and entering the scroll areas.
    ''' </summary>
    Private Sub panAutoDownScrollingOnTouch_MouseEnter_PanelArea(sender As Object, e As EventArgs)
        'With Me.panAutoDownScrollingOnTouch
        '    If .MB.CurrentMouseButtons = Windows.Forms.MouseButtons.Left Then
        '        Me.AutoScrollByAmount = -(.Height - .PointToClient(MousePosition).Y)
        '    Else
        '        Me.AutoScrollByAmount = 0
        '    End If
        'End With
    End Sub

    ''' <summary>
    ''' Automatic scrolling of the list, on holding the left mouse button,
    ''' and entering the scroll areas.
    ''' </summary>
    Private Sub panAutoScrollingOnTouch_MouseLeave_PanelArea(sender As Object, e As EventArgs)
        Me.AutoScrollByAmount = 0
    End Sub

    ''' <summary>
    ''' Auto-Scroll timer tick.
    ''' </summary>
    Private Sub AutoScrollTimerTick() Handles timAutomaticScrollTimer.Tick
        Me.ScrollList(iAutoScrollByAmount)
    End Sub

#End Region

#Region "GUI Switch during Loading!"

    ''' <summary>
    ''' Enables/disables the List-Load buttons and set's the icons.
    ''' </summary>
    Private Sub SetInterfaceToLoadingListModus(ByVal IsListLoading As Boolean)
        If IsListLoading Then
            Me.mnuRefreshList.Text = My.Resources.FileListRefresh_Cancel
            Me.mnuRefreshList.ToolTipText = My.Resources.FileListRefresh_CancelTT
            Me.mnuRefreshList.Image = My.Resources.cancel_16
            Me.panProgress.Visible = True
            Me.lblProgressHeading.Text = My.Resources.rDataBrowser.ProgressBox_FolderScanHeading
        Else
            Me.mnuRefreshList.Text = My.Resources.FileListRefresh_RefreshList
            Me.mnuRefreshList.ToolTipText = My.Resources.FileListRefresh_RefreshListTT
            Me.mnuRefreshList.Image = My.Resources.reload_16
            Me.panProgress.Visible = False
        End If
        Me.mnuFilter.Enabled = Not IsListLoading
        Me.mnuSorting.Enabled = Not IsListLoading
        If IsListLoading Then Me.mnuMultipleSpectroscopyFileActions.Enabled = False
        Me.mnuPreviewSettings.Enabled = Not IsListLoading
        Me.mnuSpecialTools.Enabled = Not IsListLoading
    End Sub

#End Region

#Region "Resizing of the window"

    ''' <summary>
    ''' Set the same size for container and list.
    ''' </summary>
    Private Sub panBrowserListContainer_Resize(sender As Object, e As EventArgs) Handles panBrowserListContainer.Resize
        With Me.panBrowserListContainer.Size
            Me.panBrowserList.Size = New Size(.Width - 5, .Height)
        End With

        ' Adapt the action bar to the width of the browserlist.
        With Me.panBrowserListContainer
            Me.panProgress.Width = .Width
            Me.panProgress.Location = New Point(.Location.X, .Location.Y + .Height - Me.panProgress.Height - Me.ssStatus.Height)
        End With
    End Sub

#End Region

#Region "Key-Press"

    ''' <summary>
    ''' Key-Down Message
    ''' </summary>
    Private WM_KEYDOWN As Integer = &H100

    ''' <summary>
    ''' React on key-press:
    ''' Ctrl-A for selection of all list-entries
    ''' </summary>
    Public Sub KeyPressed(KeyCode As Keys) Handles panBrowserListContainer.KeyPressed

        ' Select all entries on Ctrl-A:
        If CInt(Control.ModifierKeys) = CInt(Keys.Control) And KeyCode = Keys.A Then
            ' select all list-entries
            For Each LE As FileListEntry In Me.FileListDisplayed.Values
                LE.HasBeenSelected = True
            Next
        End If

        ' Start a file search on pressing Ctrl-F
        If CInt(Control.ModifierKeys) = CInt(Keys.Control) And KeyCode = Keys.F Then
            Me.mnuFilter.ShowDropDown()
            With Me.mnuFilter_SearchText
                .Focus()

                ' Quickly enter a default search string
                .Text = "**"
                .Select(1, 0)
            End With
        End If

        ' Scroll the list on pressing ONLY the Up/Down-Key by one entry.
        If KeyCode = Keys.Up OrElse
           KeyCode = Keys.Down OrElse
           KeyCode = Keys.PageUp OrElse
           KeyCode = Keys.PageDown Then

            ' If a selection is done, go to the top most selected entry,
            ' and select the next higher one

            ' get the highest lying selected list-entry
            Dim iHighestCoordinate As Integer = Integer.MaxValue
            Dim iLowestCoordinate As Integer = 0
            Dim iHighestListIndex As Integer = -1
            Dim iLowestListIndex As Integer = -1
            For i As Integer = 0 To Me.ListEntriesSelected.Count - 1 Step 1
                For j As Integer = 0 To Me.FileListDisplayed_SortedAndFiltered.Count - 1 Step 1
                    If Me.FileListDisplayed_SortedAndFiltered(j) = Me.ListEntriesSelected(i).FileObject.FullFileNameInclPath Then
                        If Me.GetListEntryLocationByIndex(j).Y <= iHighestCoordinate Then
                            iHighestCoordinate = Me.GetListEntryLocationByIndex(j).Y
                            iHighestListIndex = j
                        End If
                        If Me.GetListEntryLocationByIndex(j).Y >= iLowestCoordinate Then
                            iLowestCoordinate = Me.GetListEntryLocationByIndex(j).Y
                            iLowestListIndex = j
                        End If
                    End If
                Next
            Next

            ' Scroll up or down.
            If iHighestListIndex > 0 AndAlso
                KeyCode = Keys.Up AndAlso
                CInt(Control.ModifierKeys) = CInt(Keys.None) Then
                ' Scroll UP (single)
                '####################
                ' Now deselect all list-entries
                For Each LE As FileListEntry In Me.FileListDisplayed.Values
                    LE.HasBeenSelected = False
                Next

                ' And now select only the highest - 1 list-entry.
                Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(iHighestListIndex - 1)).HasBeenSelected = True
                Me.ScrollList(iHighestCoordinate - Me.HeightPerListEntry, False)

                Me.ListEntrySelectionChanged()

            ElseIf iHighestListIndex > 5 AndAlso
                KeyCode = Keys.PageUp AndAlso
                CInt(Control.ModifierKeys) = CInt(Keys.None) Then
                ' Scroll UP (multiple)
                '####################
                ' Now deselect all list-entries
                For Each LE As FileListEntry In Me.FileListDisplayed.Values
                    LE.HasBeenSelected = False
                Next

                ' And now select only the highest - 1 list-entry.
                Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(iHighestListIndex - 5)).HasBeenSelected = True
                Me.ScrollList(iHighestCoordinate - Me.HeightPerListEntry, False)

                Me.ListEntrySelectionChanged()

            ElseIf iLowestListIndex >= 0 AndAlso
                   iLowestListIndex < Me.FileListDisplayed_SortedAndFiltered.Count - 1 AndAlso
                   KeyCode = Keys.Down AndAlso
                   CInt(Control.ModifierKeys) = CInt(Keys.None) Then
                ' Scroll DOWN (single)
                '######################
                ' Now deselect all list-entries
                For Each LE As FileListEntry In Me.FileListDisplayed.Values
                    LE.HasBeenSelected = False
                Next

                ' And now select only the highest - 1 list-entry.
                Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(iLowestListIndex + 1)).HasBeenSelected = True
                Me.ScrollList(iLowestCoordinate, False)

                Me.ListEntrySelectionChanged()

            ElseIf iLowestListIndex >= 0 And
               iLowestListIndex < Me.FileListDisplayed_SortedAndFiltered.Count - 5 And
               KeyCode = Keys.PageDown And
               CInt(Control.ModifierKeys) = CInt(Keys.None) Then
                ' Scroll DOWN (multiple)
                '######################
                ' Now deselect all list-entries
                For Each LE As FileListEntry In Me.FileListDisplayed.Values
                    LE.HasBeenSelected = False
                Next

                ' And now select only the highest - 1 list-entry.
                Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(iLowestListIndex + 5)).HasBeenSelected = True
                Me.ScrollList(iLowestCoordinate, False)

                Me.ListEntrySelectionChanged()

            End If

        End If
    End Sub

#End Region

#Region "Selection of List-Entries"

    ''' <summary>
    ''' Call on change of the list-entry-selection
    ''' </summary>
    Public Sub ListEntrySelectionChanged()
        '#################################################
        '#################################################
        ' Analyse the selection, and perform some actions

        ' Count the selected file-types
        Dim SelectedSpectroscopyTables As IEnumerable(Of cFileObject) = Me.FileObjectsSelected.Where(Function(obj) obj.FileType = cFileObject.FileTypes.SpectroscopyTable)
        Dim SelectedScanImages As IEnumerable(Of cFileObject) = Me.FileObjectsSelected.Where(Function(obj) obj.FileType = cFileObject.FileTypes.ScanImage)
        Dim SelectedGridFiles As IEnumerable(Of cFileObject) = Me.FileObjectsSelected.Where(Function(obj) obj.FileType = cFileObject.FileTypes.GridFile)

        Dim iCountSpectroscopyTables As Integer = SelectedSpectroscopyTables.Count
        Dim iCountScanImages As Integer = SelectedScanImages.Count
        Dim iCountGridFiles As Integer = SelectedGridFiles.Count

        ' Count the number of selected spectroscopy-tables and scan images,
        ' to enable the menu buttons.
        Me.mnuMultipleSpectroscopyFileActions.Enabled = iCountSpectroscopyTables > 0
        Me.mnuMultipleScanImageFileActions.Enabled = iCountScanImages > 0

        ' If we have selected only a single spectroscopy-table, report this to the hosting window.
        ' Do the same for scan-images
        If iCountSpectroscopyTables = 1 Then
            RaiseEvent SingleSpectroscopyTableSelected(SelectedSpectroscopyTables(0))
        ElseIf iCountSpectroscopyTables > 1 Then
            RaiseEvent MultipleSpectroscopyTableSelected(SelectedSpectroscopyTables.ToList)

            ' Also raise the event to plot all in the preview window, if the setting box is checked.
            If Me.mnuTools_PlotSpectraTogetherAutomatic.Checked Then
                RaiseEvent MultipleSpectroscopyTableSelectedShowInPreview(SelectedSpectroscopyTables.ToList)
            End If

        End If

        If iCountScanImages = 1 Then
            RaiseEvent SingleScanImageSelected(SelectedScanImages(0))
        ElseIf iCountScanImages > 1 Then
            RaiseEvent MultipleScanImagesSelected(SelectedScanImages.ToList)
        End If

        If iCountGridFiles = 1 Then
            RaiseEvent SingleGridFileSelected(SelectedGridFiles(0))
        ElseIf iCountGridFiles > 1 Then
            RaiseEvent MultipleGridFilesSelected(SelectedGridFiles.ToList)
        End If

    End Sub

#End Region

#Region "Handling of events fired by List-Entries (Selection & Co)"

#Region "On List-Entry Selected"

    ''' <summary>
    ''' Handles events thrown by list-entries.
    ''' </summary>
    Private Sub OnListEntryClicked(ByRef ListEntry As mDataBrowserListEntry,
                                   ByVal ModifierKeys As Keys)
        Dim CurrentlySelectedFileListEntry As FileListEntry = Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(Me.FileListDisplayed_SortedAndFiltered.IndexOf(ListEntry.CurrentFileObject.FullFileNameInclPath)))
        ' Change the selection, depending on the pressed modifier-keys:
        ' None    = select ONLY this entry, and deselect all the others!
        '           also, if other have been selected so far, then clear this selection.
        ' Control = add this item to the selected entries
        ' Shift   = select ALL items between the first selected, and the clicked one
        Select Case ModifierKeys
            Case Keys.Control
                ' Control
                ' just add or remove the clicked list-entry.
                '#########################
                If Not ListEntry.ListEntrySelected Then
                    CurrentlySelectedFileListEntry.HasBeenSelected = True
                Else
                    CurrentlySelectedFileListEntry.HasBeenSelected = False
                End If

            Case Keys.Shift
                ' Shift
                ' select all between the first selected
                '#########################

                Dim CurrentListEntryIndex As Integer = Me.FileListDisplayed_SortedAndFiltered.IndexOf(ListEntry.CurrentFileObject.FullFileNameInclPath)

                ' get the closest lying selected list-entry
                Dim iHighestCoordinate As Integer = Integer.MaxValue
                Dim iLowestCoordinate As Integer = 0
                Dim iHighestListIndex As Integer = -1
                Dim iLowestListIndex As Integer = -1

                For i As Integer = 0 To Me.ListEntriesSelected.Count - 1 Step 1
                    For j As Integer = 0 To Me.FileListDisplayed_SortedAndFiltered.Count - 1 Step 1
                        If Me.FileListDisplayed_SortedAndFiltered(j) = Me.ListEntriesSelected(i).FileObject.FullFileNameInclPath Then
                            If Me.GetListEntryLocationByIndex(j).Y <= iHighestCoordinate Then
                                iHighestCoordinate = Me.GetListEntryLocationByIndex(j).Y
                                iHighestListIndex = j
                            End If
                            If Me.GetListEntryLocationByIndex(j).Y >= iLowestCoordinate Then
                                iLowestCoordinate = Me.GetListEntryLocationByIndex(j).Y
                                iLowestListIndex = j
                            End If
                        End If
                    Next
                Next

                ' Get the closest list-entry
                Dim ClosestListEntryIndex As Integer = -1
                If iHighestListIndex >= 0 Then
                    ClosestListEntryIndex = iHighestListIndex
                End If
                If iLowestListIndex >= 0 Then
                    If iHighestListIndex < 0 Then
                        ClosestListEntryIndex = iLowestListIndex
                    Else
                        If Math.Abs(iLowestListIndex - CurrentListEntryIndex) < Math.Abs(iHighestListIndex - CurrentListEntryIndex) Then
                            ClosestListEntryIndex = iLowestListIndex
                        End If
                    End If
                End If

                ' did we find a closest lying list-entry?
                If ClosestListEntryIndex >= 0 Then
                    ' Now deselect all list-entries
                    For Each LE As FileListEntry In Me.FileListDisplayed.Values
                        LE.HasBeenSelected = False
                        'LE.ListEntry.ListEntrySelected = False
                    Next

                    ' And now select all between the closest
                    ' list-index, and the selected one
                    For i As Integer = Math.Min(CurrentListEntryIndex, ClosestListEntryIndex) To Math.Max(CurrentListEntryIndex, ClosestListEntryIndex) Step 1
                        Me.FileListDisplayed(Me.FileListDisplayed_SortedAndFiltered(i)).HasBeenSelected = True
                    Next

                End If

            Case Else
                ' none, and all other possible
                '##############################
                ' deselect all list-entries, except the current one
                For Each LE As FileListEntry In Me.FileListDisplayed.Values
                    'LE.ListEntry.ListEntrySelected = False
                    LE.HasBeenSelected = LE.FileObject.FileName = ListEntry.CurrentFileObject.FileName
                Next
        End Select

        Me.ListEntrySelectionChanged()
    End Sub

#End Region

#Region "On List-Entry fetched"

    ''' <summary>
    ''' Handles events thrown by list-entries.
    ''' </summary>
    Private Sub OnListEntryFetched(ByVal FileType As cFileObject.FileTypes,
                                   ByRef ListEntry As mDataBrowserListEntry.ListEntry,
                                   ByVal ReloadDueToChangeInFileObject As Boolean)

        ' Check, if the data-column names or scan-image channel-names
        ' already exist in the filter lists.
        If FileType = cFileObject.FileTypes.SpectroscopyTable Then
            Me.ListOfPreviewImageColumns = Me.ListOfPreviewImageColumns.Union(ListEntry.ColumnNames).ToList
        ElseIf FileType = cFileObject.FileTypes.ScanImage Then
            Me.ListOfPreviewImageChannels = Me.ListOfPreviewImageChannels.Union(ListEntry.ColumnNames).ToList
        End If

        ' Save file-object list to buffer.
        If ReloadDueToChangeInFileObject Then
            'Me.SaveFileBuffer()
        End If

    End Sub

#End Region

#Region "On List-Entry RightClicked"

    ''' <summary>
    ''' Handles events thrown by list-entries.
    ''' </summary>
    Private Sub OnListEntryRightClicked(ByRef FileObject As cFileObject)

        ' set the current file-object
        Me._CurrentContextMenuFileObject = FileObject
        Dim Rect As Rectangle = Me.RectangleToClient(Me.panBrowserList.RectangleToScreen(Me.panBrowserList.ClientRectangle))

        For Each APIButton As KeyValuePair(Of ToolStripMenuItem, iDataBrowser_FileObjectAction) In Me.FileActionAPIsToMenuButtons
            If APIButton.Value.CanHandleSingleFileObjects Then
                APIButton.Key.Enabled = True
            End If
        Next

        ' Open context menu depending on the file-type at the mouse-cursor position
        If FileObject.FileType = cFileObject.FileTypes.SpectroscopyTable Then
            Me.cmnuSpectroscopy_Header.Text = FileObject.FileNameWithoutPath
            Me.cmSpectroscopyFile.Show(Cursor.Position)
        ElseIf FileObject.FileType = cFileObject.FileTypes.ScanImage Then
            Me.cmnuScanImage_Header.Text = FileObject.FileNameWithoutPath
            Me.cmScanImageFile.Show(Cursor.Position)
        ElseIf FileObject.FileType = cFileObject.FileTypes.GridFile Then
            Me.cmnuGridFile_Header.Text = FileObject.FileNameWithoutPath
            Me.cmGridFile.Show(Cursor.Position)
        End If

    End Sub

    ''' <summary>
    ''' On closing the context-menu, remove the reference to the current file-object.
    ''' NOT WORKING!!! IS CALLED, BEFORE THE CLICK_ACTION OF THE BUTTON CLICKED!!!
    ''' </summary>
    Private Sub ContextMenu_Closed(sender As Object, e As ToolStripDropDownClosedEventArgs) Handles cmScanImageFile.Closed, cmSpectroscopyFile.Closed, cmGridFile.Closed
        'Me._CurrentContextMenuFileObject = Nothing
    End Sub

#End Region

#End Region

#Region "API access to single file action functions"

    ''' <summary>
    ''' Handles the click on a multiple file-action menu-button.
    ''' It searches for the API implementation,
    ''' and launches the action.
    ''' </summary>
    Private Sub SingleFileMenuItemAPIClick(sender As Object, e As EventArgs)
        Dim B As ToolStripMenuItem = TryCast(sender, ToolStripMenuItem)
        If B Is Nothing Then Return

        ' Launch single-file action directly.
        If Me.FileActionAPIsToMenuButtons.ContainsKey(B) And Not Me._CurrentContextMenuFileObject Is Nothing Then

            Me.FileActionAPIsToMenuButtons(B).SingleFileAction(Me._CurrentContextMenuFileObject)

        End If
    End Sub

#End Region

#Region "API access to multiple file action functions"

    ''' <summary>
    ''' Handles the click on a multiple file-action menu-button.
    ''' It searches for the API implementation,
    ''' and launches the action.
    ''' </summary>
    Private Sub MultipleFileMenuItemAPIClick(sender As Object, e As EventArgs)

        ' Check if we get the API from the clicked button.
        Dim B As ToolStripMenuItem = TryCast(sender, ToolStripMenuItem)
        If B Is Nothing Then Return
        If Not Me.FileActionAPIsToMenuButtons.ContainsKey(B) Then Return
        Dim API As iDataBrowser_FileObjectAction = Me.FileActionAPIsToMenuButtons(B)

        ' Get the selected list entries
        Dim SelectedListEntries As List(Of FileListEntry) = Me.ListEntriesSelected

        ' Check, if we have selected some list-entries.
        If SelectedListEntries.Count <= 0 Then Return

        ' Check, whether to launch the API-call in one bunch for all selected files,
        ' or whether to process each file individually, via a thread-pool work-group.

        ' Process multiple files ASYNC on the Thread-Pool, or directly
        ' (e.g. the decision: perform tasks, or show GUI)
        If API.MultipleFilesProcessASYNC Then

            ' Create new work-items-group in suspended mode
            Dim wigStartInfo As New WIGStartInfo()
            wigStartInfo.StartSuspended = True
            Me.wigMultipleFileAPIProcessingWorkItemsGroup = Me._ThreadPool.CreateWorkItemsGroup(Me._ThreadPool.Concurrency, wigStartInfo)

            If API.MultipleFilesProcessedIndividually Then

                ' Process all the files individually.

                ' Disable the interface, and show the status
                Me.FileBufferFetcher_ReportProgress(Me, New System.ComponentModel.ProgressChangedEventArgs(50, My.Resources.rDataBrowser.MultipleFileActions_Processing))

                ' Launch multiple-file action for each file in the thread-pool.
                For i As Integer = 0 To SelectedListEntries.Count - 1 Step 1

                    ' Create informations for the worker, about the work to do.
                    Dim WorkerState As New MultipleAPIWorkerState_Individual
                    WorkerState.FileObject = SelectedListEntries(i).FileObject
                    WorkerState.API = API
                    wigMultipleFileAPIProcessingWorkItemsGroup.QueueWorkItem(FileActionAPIMultipleFilesIndividual_ProcessCallback, WorkerState)

                Next


            Else

                ' Create informations for the worker, about the work to do.
                Dim WorkerState As New MultipleAPIWorkerState_AllAtOnce
                WorkerState.FileObjects = Me.FileObjectsSelected
                WorkerState.API = API
                ' Call the API with all files directly
                wigMultipleFileAPIProcessingWorkItemsGroup.QueueWorkItem(FileActionAPIMultipleFilesAllAtOnce_ProcessCallback, WorkerState)

            End If

            ' disable those parts of the interface we don't want to be changed
            ' by the user, during processing the request.
            Me.panProgress.Visible = True
            Me.lblProgressHeading.Text = My.Resources.rDataBrowser.ProgressBox_FileProcessHeading
            Me.panBrowserListContainer.Enabled = False
            Me.mnu.Enabled = False

            ' Wait, until all files have been processed.
            ' Avoids user action spamming and too quick reactions
            ' on slower computers.
            wigMultipleFileAPIProcessingWorkItemsGroup.Start()

        Else

            If API.MultipleFilesProcessedIndividually Then
                ' Process all the files individually.
                ' Launch multiple-file action for each file.
                For i As Integer = 0 To SelectedListEntries.Count - 1 Step 1
                    API.MultipleFileAction_IndividualAction(SelectedListEntries(i).FileObject)
                Next
            Else
                API.MultipleFileAction_AllAtOnce(Me.FileObjectsSelected)
            End If

        End If

    End Sub

    ''' <summary>
    ''' Enable the interface again, after all multiple-file actions of the API have finished.
    ''' This happens, if the work-items-group responsible for processing the actions
    ''' gets idle again.
    ''' </summary>
    Private Sub MultipleFileAPIWorkItemsGroup_OnIdle()
        Me.panProgress.Visible = False
        Me.panBrowserListContainer.Enabled = True
        Me.mnu.Enabled = True
        Me.lblStatus.Text = My.Resources.rDataBrowser.StatusText_Ready
        Me.wigMultipleFileAPIProcessingWorkItemsGroup = Nothing
    End Sub

    ''' <summary>
    ''' Worker state to pass parameters the the multiple-API worker process.
    ''' </summary>
    Private Structure MultipleAPIWorkerState_Individual
        Public FileObject As cFileObject
        Public API As iDataBrowser_FileObjectAction
    End Structure

    ''' <summary>
    ''' Worker object, that processes the individual actions for each file
    ''' calling the API functions for multiple-file actions.
    ''' </summary>
    Private Function FileActionAPIMultipleFilesIndividual_ProcessWorkerCallback(WorkerState As Object) As Object
        Dim State As MultipleAPIWorkerState_Individual = DirectCast(WorkerState, MultipleAPIWorkerState_Individual)
        State.API.MultipleFileAction_IndividualAction(State.FileObject)
        Return Nothing
    End Function

    ''' <summary>
    ''' Worker state to pass parameters the the multiple-API worker process.
    ''' </summary>
    Private Structure MultipleAPIWorkerState_AllAtOnce
        Public FileObjects As List(Of cFileObject)
        Public API As iDataBrowser_FileObjectAction
    End Structure

    ''' <summary>
    ''' Worker object, that processes the all files at once
    ''' calling the API functions for multiple-file actions.
    ''' </summary>
    Private Function FileActionAPIMultipleFilesAllAtOnce_ProcessWorkerCallback(WorkerState As Object) As Object
        Dim State As MultipleAPIWorkerState_AllAtOnce = DirectCast(WorkerState, MultipleAPIWorkerState_AllAtOnce)
        State.API.MultipleFileAction_AllAtOnce(State.FileObjects)
        Return Nothing
    End Function

    ''' <summary>
    ''' Thread-Safe eventhandler, to raise an event, if all file actions were finished!
    ''' </summary>
    Private eMultipleFileAPIWorkItemsGroupIdle As New EventHandler(AddressOf MultipleFileAPIWorkItemsGroup_OnIdle)

    ''' <summary>
    ''' Enable the interface again, after all multiple-file actions of the API have finished.
    ''' This happens, if the work-items-group responsible for processing the actions
    ''' gets idle again.
    ''' Dispatcher for a thread-safe event.
    ''' </summary>
    Private Sub MultipleFileAPIWorkItemsGroup_OnIdleDispatcher() Handles wigMultipleFileAPIProcessingWorkItemsGroup.OnIdle
        eMultipleFileAPIWorkItemsGroupIdle.RaiseEventAndExecuteItInAnExplicitOrUIThread(Nothing, Nothing)
    End Sub

    ''' <summary>
    ''' On drop down opening, check, if settings are set for the API-buttons.
    ''' </summary>
    Private Sub mnuMultipleFileActions_DropDownOpening(sender As Object, e As EventArgs) Handles mnuMultipleSpectroscopyFileActions.DropDownOpening, mnuMultipleScanImageFileActions.DropDownOpening

        ' Go through all buttons, and check their settings.
        For Each APIButton As KeyValuePair(Of ToolStripMenuItem, iDataBrowser_FileObjectAction) In Me.FileActionAPIsToMenuButtons
            If APIButton.Value.MultipleFileActionCheckSettings And
               Me.ListEntriesSelected.Count >= APIButton.Value.MultipleFiles_Count_Min And
               Me.ListEntriesSelected.Count <= APIButton.Value.MultipleFiles_Count_Max Then
                APIButton.Key.Enabled = True
            Else
                APIButton.Key.Enabled = False
            End If
        Next

    End Sub

#End Region

#Region "Timer and automatic folder refresh"

    ''' <summary>
    ''' Counter to refresh the list automatically.
    ''' </summary>
    Private _RefreshCountDownInSec As Integer = 300

    Private _RefreshTimerCountInSeconds As Integer = 300
    ''' <summary>
    ''' Settings how often the list should be refreshed.
    ''' If set to = 0 then the timer will be stopped.
    ''' </summary>
    Public Property RefreshTimerCountInSeconds As Integer
        Get
            Return Me._RefreshTimerCountInSeconds
        End Get
        Set(value As Integer)
            If value <= 0 Then
                Me.timRefreshListTimer.Stop()
                Me.lblTimerStatus.Text = My.Resources.rDataBrowser.RefreshTimer_Disabled
                Me.smnuTimerOnOff.Checked = False
            Else
                Me.timRefreshListTimer.Stop()
                Me.timRefreshListTimer.Start()
                Me._RefreshTimerCountInSeconds = value
                Me._RefreshCountDownInSec = value
                Me.smnuTimerOnOff.Checked = True
            End If
        End Set
    End Property

    ''' <summary>
    ''' Activate or deactivate the timer.
    ''' </summary>
    Private Sub smnuTimerOnOff_Click(sender As Object, e As EventArgs) Handles smnuTimerOnOff.Click
        If Me.smnuTimerOnOff.Checked Then
            Me.RefreshTimerCountInSeconds = 0
        Else
            Me.RefreshTimerCountInSeconds = Me.RefreshTimerCountInSeconds
        End If
    End Sub

    ''' <summary>
    ''' Change the timer period
    ''' </summary>
    Private Sub mnuTimerConfig_RefreshTime_TextChanged(sender As Object, e As EventArgs) Handles mnuTimerConfig_RefreshTime.TextChanged
        With Me.mnuTimerConfig_RefreshTime
            If IsNumeric(.Text) Then
                .BackColor = Color.DarkGreen
                .ForeColor = Color.White
                Me.mnuTimerConfig_ApplyTimer.Enabled = True
            Else
                .BackColor = Color.Red
                .ForeColor = Color.White
                Me.mnuTimerConfig_ApplyTimer.Enabled = False
            End If
        End With
    End Sub

    ''' <summary>
    ''' Apply the new timer settings.
    ''' </summary>
    Private Sub mnuTimerConfig_ApplyTimer_Click(sender As Object, e As EventArgs) Handles mnuTimerConfig_ApplyTimer.Click

        ' Check for valid settings:
        If Not IsNumeric(Me.mnuTimerConfig_RefreshTime.Text) Then Return

        Dim NewTimerInterval As Integer = Integer.Parse(Me.mnuTimerConfig_RefreshTime.Text)
        Me.mnuTimerConfig_RefreshTime.Text = NewTimerInterval.ToString("N0")

        ' Apply the timer settings
        Me.RefreshTimerCountInSeconds = NewTimerInterval
        My.Settings.DataBrowserFileList_RefreshTimer = NewTimerInterval

    End Sub


    ''' <summary>
    ''' Cronjob, that automatically checks the loaded folder for new content.
    ''' </summary>
    Public Sub RefreshTimer() Handles timRefreshListTimer.Tick
        If Me._RefreshCountDownInSec <= 0 Then
            ' Refresh the list
            Me._RefreshCountDownInSec = Me._RefreshTimerCountInSeconds

            ' Fetch the list, if we are not busy!
            If Not Me.IsBusy And Me.wigMultipleFileAPIProcessingWorkItemsGroup Is Nothing Then
                Me.DeleteCacheFile()
                Me.GetCurrentFileList()
            End If

        Else
            ' Count down
            Me._RefreshCountDownInSec -= 1
            Me.lblTimerStatus.Text = My.Resources.rDataBrowser.RefreshTimer_CountDown.Replace("%t", Me._RefreshCountDownInSec.ToString)
        End If
    End Sub

#End Region

#Region "Thread-Pool New Work Queued!"

    ''' <summary>
    ''' Handles the new work, that got queued by a functionality.
    ''' </summary>
    Public Sub NewWorkQueued() Handles _ThreadPool.NewWorkQueued
        Me.lblStatus.Text = _ThreadPool.WaitingCallbacks.ToString("N0") & " tasks have to be finished!"
    End Sub

#End Region

#Region "Settings Panel and Preview Settings"

    ''' <summary>
    ''' List with preview-image-column-names to be displayed in the context-menu
    ''' </summary>
    Private ListOfPreviewImageColumns As New List(Of String)

    ''' <summary>
    ''' List with channel-names to be displayed in the context-menu
    ''' </summary>
    Private ListOfPreviewImageChannels As New List(Of String)

    ''' <summary>
    ''' Structure, that contains all settings for the
    ''' list-entries to show the preview image.
    ''' </summary>
    Public Structure PreviewImageSettings
        Public SpectroscopyTable_ColumnNameX_1st As String
        Public SpectroscopyTable_ColumnNameX_2nd As String
        Public SpectroscopyTable_ColumnNameX_3rd As String
        Public SpectroscopyTable_ColumnNameY_1st As String
        Public SpectroscopyTable_ColumnNameY_2nd As String
        Public SpectroscopyTable_ColumnNameY_3rd As String

        ''' <summary>
        ''' Returns the first ColumnName that matches the
        ''' selected preview image ColumnName (1st, 2nd, 3rd.)
        ''' in the list of all X columns.
        ''' 
        ''' If 1st matches, it returns the first. Then checks for 2nd, etc.
        ''' If None matches, it returns an empty string.
        ''' </summary>
        Public Function GetFirstExistingColumnName_X(ByVal ListOfColumnNamesToBeChecked As List(Of String)) As String

            If ListOfColumnNamesToBeChecked.Contains(Me.SpectroscopyTable_ColumnNameX_1st) Then Return Me.SpectroscopyTable_ColumnNameX_1st
            If ListOfColumnNamesToBeChecked.Contains(Me.SpectroscopyTable_ColumnNameX_2nd) Then Return Me.SpectroscopyTable_ColumnNameX_2nd
            If ListOfColumnNamesToBeChecked.Contains(Me.SpectroscopyTable_ColumnNameX_3rd) Then Return Me.SpectroscopyTable_ColumnNameX_3rd

            Return String.Empty
        End Function

        ''' <summary>
        ''' Returns the first ColumnName that matches the
        ''' selected preview image ColumnName (1st, 2nd, 3rd.)
        ''' in the list of all X columns.
        ''' 
        ''' If 1st matches, it returns the first. Then checks for 2nd, etc.
        ''' If None matches, it returns an empty string.
        ''' </summary>
        Public Function GetFirstExistingColumnName_Y(ByVal ListOfColumnNamesToBeChecked As List(Of String)) As String

            If ListOfColumnNamesToBeChecked.Contains(Me.SpectroscopyTable_ColumnNameY_1st) Then Return Me.SpectroscopyTable_ColumnNameY_1st
            If ListOfColumnNamesToBeChecked.Contains(Me.SpectroscopyTable_ColumnNameY_2nd) Then Return Me.SpectroscopyTable_ColumnNameY_2nd
            If ListOfColumnNamesToBeChecked.Contains(Me.SpectroscopyTable_ColumnNameY_3rd) Then Return Me.SpectroscopyTable_ColumnNameY_3rd

            Return String.Empty
        End Function

        Public SpectroscopyTable_LogX As Boolean
        Public SpectroscopyTable_LogY As Boolean
        Public SpectroscopyTable_EnablePointReduction As Boolean

        Public ScanImage_Channel As String
    End Structure

    ''' <summary>
    ''' Current settings for the preview-images.
    ''' </summary>
    Private _CurrentPreviewImageSettings As PreviewImageSettings

    ''' <summary>
    ''' Current settings for the preview-images.
    ''' </summary>
    Public ReadOnly Property CurrentPreviewImageSettings As PreviewImageSettings
        Get
            Return Me._CurrentPreviewImageSettings
        End Get
    End Property

    ''' <summary>
    ''' Update the current preview image settings
    ''' </summary>
    Private Sub OnSettingsPanelOpening() Handles mnuPreviewSettings.DropDownOpening
        Me.SetPreviewImageColumnsAndChannels()
    End Sub

    ''' <summary>
    ''' Applies the Settings to the Preview-Images:
    ''' </summary>
    Private Sub PreviewImageSettingsChanged_SpectroscopyTable(sender As System.Object, e As System.EventArgs) Handles _
        mnuPreview_cbSpectroscopyColumnX_1st.SelectedIndexChanged,
        mnuPreview_cbSpectroscopyColumnX_2nd.SelectedIndexChanged,
        mnuPreview_cbSpectroscopyColumnX_3rd.SelectedIndexChanged,
        mnuPreview_cbSpectroscopyColumnY_1st.SelectedIndexChanged,
        mnuPreview_cbSpectroscopyColumnY_2nd.SelectedIndexChanged,
        mnuPreview_cbSpectroscopyColumnY_3rd.SelectedIndexChanged,
        mnuPreview_Spectroscopy_LogX.CheckedChanged,
        mnuPreview_Spectroscopy_LogY.CheckedChanged,
        mnuPreview_Spectroscopy_PointReduction.CheckedChanged

        If Not Me.bReady Then Return

        ' Create new preview-image settings-object.
        Me._CurrentPreviewImageSettings = New PreviewImageSettings

        With Me._CurrentPreviewImageSettings

            .SpectroscopyTable_ColumnNameX_1st = Convert.ToString(mnuPreview_cbSpectroscopyColumnX_1st.SelectedItem)
            .SpectroscopyTable_ColumnNameX_2nd = Convert.ToString(mnuPreview_cbSpectroscopyColumnX_2nd.SelectedItem)
            .SpectroscopyTable_ColumnNameX_3rd = Convert.ToString(mnuPreview_cbSpectroscopyColumnX_3rd.SelectedItem)
            .SpectroscopyTable_ColumnNameY_1st = Convert.ToString(mnuPreview_cbSpectroscopyColumnY_1st.SelectedItem)
            .SpectroscopyTable_ColumnNameY_2nd = Convert.ToString(mnuPreview_cbSpectroscopyColumnY_2nd.SelectedItem)
            .SpectroscopyTable_ColumnNameY_3rd = Convert.ToString(mnuPreview_cbSpectroscopyColumnY_3rd.SelectedItem)
            .SpectroscopyTable_LogX = mnuPreview_Spectroscopy_LogX.Checked
            .SpectroscopyTable_LogY = mnuPreview_Spectroscopy_LogY.Checked
            .SpectroscopyTable_EnablePointReduction = mnuPreview_Spectroscopy_PointReduction.Checked

            .ScanImage_Channel = Convert.ToString(mnuPreview_cbScanImageChannel.SelectedItem)

        End With

        ' Saves the selected columns and image-Parameters to the settings
        With My.Settings
            .ListPreviewImage_LogX = Me._CurrentPreviewImageSettings.SpectroscopyTable_LogX
            .ListPreviewImage_LogY = Me._CurrentPreviewImageSettings.SpectroscopyTable_LogY
            .ListPreviewImage_ReducePoints = Me._CurrentPreviewImageSettings.SpectroscopyTable_EnablePointReduction
            .LastPreviewImageList_ColumnNameX = Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_1st
            .LastPreviewImageList_ColumnNameX_2nd = Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_2nd
            .LastPreviewImageList_ColumnNameX_3rd = Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_3rd
            .LastPreviewImageList_ColumnNameY = Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_1st
            .LastPreviewImageList_ColumnNameY_2nd = Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_2nd
            .LastPreviewImageList_ColumnNameY_3rd = Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_3rd

            .Save()
        End With

        ' Go through all list-entries, and tell them to reload the preview-image.
        For Each LE As FileListEntry In Me.FileListDisplayed.Values
            ' Fetch the list-entry again.
            If LE.FileObject.FileType = cFileObject.FileTypes.SpectroscopyTable Then
                If Not LE.ListEntry Is Nothing Then
                    LE.ListEntry.PreviewImageSettings = Me._CurrentPreviewImageSettings
                    LE.ListEntry.FetchListEntry()
                End If
            End If
        Next

    End Sub

    ''' <summary>
    ''' Applies the Settings to the Preview-Images:
    ''' </summary>
    Private Sub PreviewImageSettingsChanged_ScanImage(sender As System.Object, e As System.EventArgs) _
        Handles mnuPreview_cbScanImageChannel.SelectedIndexChanged

        If Not Me.bReady Then Return

        ' Create new preview-image settings-object.
        Me._CurrentPreviewImageSettings = New PreviewImageSettings

        With Me._CurrentPreviewImageSettings

            .SpectroscopyTable_ColumnNameX_1st = Convert.ToString(mnuPreview_cbSpectroscopyColumnX_1st.SelectedItem)
            .SpectroscopyTable_ColumnNameX_2nd = Convert.ToString(mnuPreview_cbSpectroscopyColumnX_2nd.SelectedItem)
            .SpectroscopyTable_ColumnNameX_3rd = Convert.ToString(mnuPreview_cbSpectroscopyColumnX_3rd.SelectedItem)
            .SpectroscopyTable_ColumnNameY_1st = Convert.ToString(mnuPreview_cbSpectroscopyColumnY_1st.SelectedItem)
            .SpectroscopyTable_ColumnNameY_2nd = Convert.ToString(mnuPreview_cbSpectroscopyColumnY_2nd.SelectedItem)
            .SpectroscopyTable_ColumnNameY_3rd = Convert.ToString(mnuPreview_cbSpectroscopyColumnY_3rd.SelectedItem)
            .SpectroscopyTable_LogX = mnuPreview_Spectroscopy_LogX.Checked
            .SpectroscopyTable_LogY = mnuPreview_Spectroscopy_LogY.Checked
            .SpectroscopyTable_EnablePointReduction = mnuPreview_Spectroscopy_PointReduction.Checked

            .ScanImage_Channel = Convert.ToString(mnuPreview_cbScanImageChannel.SelectedItem)

        End With

        ' Saves the selected columns and image-Parameters to the settings
        With My.Settings
            .LastPreviewImageList_ChannelName = Me._CurrentPreviewImageSettings.ScanImage_Channel

            .Save()
        End With

        ' Go through all list-entries, and tell them to reload the preview-image.
        For Each LE As FileListEntry In Me.FileListDisplayed.Values
            ' Fetch the list-entry again.
            If LE.FileObject.FileType = cFileObject.FileTypes.ScanImage Then
                If Not LE.ListEntry Is Nothing Then
                    LE.ListEntry.PreviewImageSettings = Me._CurrentPreviewImageSettings
                    LE.ListEntry.FetchListEntry()
                End If
            End If
        Next

    End Sub

    ''' <summary>
    ''' Sets the PreviewImage ColumnNames and Channels to the SettingsPanel.
    ''' </summary>
    Private Sub SetPreviewImageColumnsAndChannels()
        Me.bReady = False

        Me.mnuPreview_Spectroscopy_LogX.Checked = Me._CurrentPreviewImageSettings.SpectroscopyTable_LogX
        Me.mnuPreview_Spectroscopy_LogY.Checked = Me._CurrentPreviewImageSettings.SpectroscopyTable_LogY
        Me.mnuPreview_Spectroscopy_PointReduction.Checked = Me._CurrentPreviewImageSettings.SpectroscopyTable_EnablePointReduction

        ' Clear the preview-image names
        Me.mnuPreview_cbSpectroscopyColumnX_1st.Items.Clear()
        Me.mnuPreview_cbSpectroscopyColumnX_2nd.Items.Clear()
        Me.mnuPreview_cbSpectroscopyColumnX_3rd.Items.Clear()
        Me.mnuPreview_cbSpectroscopyColumnY_1st.Items.Clear()
        Me.mnuPreview_cbSpectroscopyColumnY_2nd.Items.Clear()
        Me.mnuPreview_cbSpectroscopyColumnY_3rd.Items.Clear()

        ' Add the Filter-Columns to the Comboboxes
        Dim PreviewImageColumnNameArray As String() = Me.ListOfPreviewImageColumns.ToArray
        Me.mnuPreview_cbSpectroscopyColumnX_1st.Items.AddRange(PreviewImageColumnNameArray)
        Me.mnuPreview_cbSpectroscopyColumnX_2nd.Items.AddRange(PreviewImageColumnNameArray)
        Me.mnuPreview_cbSpectroscopyColumnX_3rd.Items.AddRange(PreviewImageColumnNameArray)
        Me.mnuPreview_cbSpectroscopyColumnY_1st.Items.AddRange(PreviewImageColumnNameArray)
        Me.mnuPreview_cbSpectroscopyColumnY_2nd.Items.AddRange(PreviewImageColumnNameArray)
        Me.mnuPreview_cbSpectroscopyColumnY_3rd.Items.AddRange(PreviewImageColumnNameArray)
        For Each ColumnName As String In Me.ListOfPreviewImageColumns
            If Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_1st = ColumnName Then Me.mnuPreview_cbSpectroscopyColumnX_1st.SelectedItem = ColumnName
            If Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_2nd = ColumnName Then Me.mnuPreview_cbSpectroscopyColumnX_2nd.SelectedItem = ColumnName
            If Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_3rd = ColumnName Then Me.mnuPreview_cbSpectroscopyColumnX_3rd.SelectedItem = ColumnName
            If Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_1st = ColumnName Then Me.mnuPreview_cbSpectroscopyColumnY_1st.SelectedItem = ColumnName
            If Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_2nd = ColumnName Then Me.mnuPreview_cbSpectroscopyColumnY_2nd.SelectedItem = ColumnName
            If Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_3rd = ColumnName Then Me.mnuPreview_cbSpectroscopyColumnY_3rd.SelectedItem = ColumnName
        Next

        ' Add Filter-Channels to the Combobox
        Me.mnuPreview_cbScanImageChannel.Items.Clear()
        Me.mnuPreview_cbScanImageChannel.Items.AddRange(Me.ListOfPreviewImageChannels.ToArray)
        For Each ChannelName As String In Me.ListOfPreviewImageChannels
            If Me._CurrentPreviewImageSettings.ScanImage_Channel = ChannelName Then Me.mnuPreview_cbScanImageChannel.SelectedItem = ChannelName
        Next

        Me.bReady = True
    End Sub

#End Region

#Region "Scan for implementations of the File-Action-API"

    ''' <summary>
    ''' Returns a list with all file-action routines implemented in the program.
    ''' </summary>
    Public Shared Function GetAllFileActions() As List(Of iDataBrowser_FileObjectAction)
        Dim APIList As New List(Of iDataBrowser_FileObjectAction)

        Try
            ' fill the list of with the interfaces found.
            With APIList
                Dim APIType = GetType(iDataBrowser_FileObjectAction)
                Dim AllAPIImplementingInterfaces As IEnumerable(Of Type) = AppDomain.CurrentDomain.GetAssemblies() _
                                                                       .SelectMany(Function(s) s.GetTypes()) _
                                                                       .Where(Function(p) APIType.IsAssignableFrom(p) And p.IsClass And Not p.IsAbstract)
                For Each ImplementingType As Type In AllAPIImplementingInterfaces
                    .Add(DirectCast(System.Activator.CreateInstance(ImplementingType), iDataBrowser_FileObjectAction))
                Next
            End With
        Catch ex As Exception
            Trace.WriteLine("#ERROR: mDataBrowserList.GetAllFileActions: Error on loading: " & ex.Message)
        End Try

        Return APIList
    End Function

#End Region

#Region "Special fixed Menu Buttons to perform actions with the selected files"

#Region "Clipboard copying of data"

    ''' <summary>
    ''' Current Clipboard content.
    ''' </summary>
    Private _Clipboard As New cClipboard_SpectroscopyTable

    ''' <summary>
    ''' Copy data origin compatible into the clipboard.
    ''' </summary>
    Private Sub cmnuSpectroscopy_CopyDataToClipboardOriginCompatible_Click(sender As Object, e As EventArgs) Handles cmnuSpectroscopy_CopyDataToClipboardOriginCompatible.Click
        _Clipboard = New cClipboard_SpectroscopyTable
        _Clipboard.ExportMethod = New cExportMethod_Ascii_ORIGIN(1) ' Add an empty line between header and data
        AddHandler _Clipboard.ClipboardContentReady, AddressOf CopyToClipboard

        ' Launch fetching procedure
        cFileImport.GetSpectroscopyFile_Async(Me._CurrentContextMenuFileObject,
                                              _Clipboard, ,
                                              Me._ThreadPool)
    End Sub

    ''' <summary>
    ''' Copy data to clipboard: in english format.
    ''' </summary>
    Private Sub cmnuSpectroscopy_CopyDataToClipboard_Click(sender As Object, e As EventArgs) Handles cmnuSpectroscopy_CopyDataToClipboard.Click
        _Clipboard = New cClipboard_SpectroscopyTable
        _Clipboard.ExportMethod = New cExportMethod_Ascii_TAB(True, False)
        AddHandler _Clipboard.ClipboardContentReady, AddressOf CopyToClipboard

        ' Launch fetching procedure
        cFileImport.GetSpectroscopyFile_Async(Me._CurrentContextMenuFileObject,
                                              _Clipboard, ,
                                              Me._ThreadPool)
    End Sub

    Private Delegate Sub _CopyToClipboard(ByVal Text As String)
    ''' <summary>
    ''' Function for Copying the desired Text to the Clipboard.
    ''' </summary>
    Private Sub CopyToClipboard(ByVal Text As String)
        If Me.InvokeRequired Then
            Dim _delegate As New _CopyToClipboard(AddressOf CopyToClipboard)
            Me.Invoke(_delegate, Text)
        Else
            Clipboard.SetDataObject(Text)
            RemoveHandler _Clipboard.ClipboardContentReady, AddressOf CopyToClipboard
            _Clipboard = Nothing
        End If
    End Sub

#End Region

#Region "Open Export Wizard for the selected files"
    ''' <summary>
    ''' Open Export Wizard for the selected files
    ''' </summary>
    Private Sub mnuTools_ExportWizard_Click(sender As Object, e As EventArgs) Handles mnuTools_ExportWizard.Click
        Dim wdExportWizard As New wExportWizard_SpectroscopyTable

        ' Add the Files for the Export.
        wdExportWizard.SetExportSpectroscopyTableNames(Me.FileObjectsSelected)

        ' Show Dialog
        wdExportWizard.ShowDialog()
        ' Destroy the Window.
        wdExportWizard.Dispose()
    End Sub

    ''' <summary>
    ''' Open Export Wizard for the single right-clicked file
    ''' </summary>
    Private Sub cmnuSpectroscopy_OpenExportWizard_Click(sender As Object, e As EventArgs) Handles cmnuSpectroscopy_OpenExportWizard.Click
        Dim wdExportWizard As New wExportWizard_SpectroscopyTable

        ' Add the Files for the Export.
        wdExportWizard.SetExportSpectroscopyTableNames(Me._CurrentContextMenuFileObject)

        ' Show Dialog
        wdExportWizard.ShowDialog()
        ' Destroy the Window.
        wdExportWizard.Dispose()
    End Sub
#End Region

#Region "Open the selected files in a separate window"

    ''' <summary>
    ''' Open the selected spectroscopy table files in a separate window.
    ''' </summary>
    Private Sub mnuTools_OpenSpectroscopyFilesSeparately_Click(sender As Object, e As EventArgs) Handles mnuTools_OpenSpectroscopyFilesSeparately.Click

        ' Get selected SpectroscopyTable Files
        Dim FileList As IEnumerable(Of FileListEntry) = Me.ListEntriesSelected.Where(Function(obj) obj.FileObject.FileType = cFileObject.FileTypes.SpectroscopyTable)

        If FileList.Count > 4 Then
            If MessageBox.Show(My.Resources.rDataBrowser.ShowFileDetails_MultipleWindow_LargeCount_Question,
                               My.Resources.rDataBrowser.ShowFileDetails_MultipleWindow_LargeCount_Question_Title,
                               MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.No Then
                Return
            End If
        End If

        For Each FileEntry As FileListEntry In FileList
            Dim Window As New wDataExplorer_SpectroscopyTable
            Window.Show(FileEntry.FileObject)
            Window.SetInitialColumnSelection(Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameX_1st,
                                             Me._CurrentPreviewImageSettings.SpectroscopyTable_ColumnNameY_1st)
        Next
    End Sub

    ''' <summary>
    ''' Open the selected scan image files in a separate window.
    ''' </summary>
    Private Sub mnuTools_OpenScanImagesSeparately_Click(sender As Object, e As EventArgs) Handles mnuTools_OpenScanImagesSeparately.Click

        ' Get selected ScanImage Files
        Dim FileList As IEnumerable(Of FileListEntry) = Me.ListEntriesSelected.Where(Function(obj) obj.FileObject.FileType = cFileObject.FileTypes.ScanImage)

        If FileList.Count > 4 Then
            If MessageBox.Show(My.Resources.rDataBrowser.ShowFileDetails_MultipleWindow_LargeCount_Question,
                               My.Resources.rDataBrowser.ShowFileDetails_MultipleWindow_LargeCount_Question_Title,
                               MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.No Then
                Return
            End If
        End If

        For Each FileObject As FileListEntry In FileList
            Dim Window As New wDataExplorer_ScanImage
            Window.Show(FileObject.FileObject)
            Window.SetInitialChannelSelection(Me._CurrentPreviewImageSettings.ScanImage_Channel)
        Next
    End Sub

#End Region

#Region "Open file object in a separate window"
    ''' <summary>
    ''' Open spectroscopy-table or scan image in separate window (similar to double click on the list-entry).
    ''' </summary>
    Private Sub cmnuSpectroscopy_SpectroscopyTableShowDetails_Click(sender As Object, e As EventArgs) _
        Handles cmnuSpectroscopy_SpectroscopyTableShowDetails.Click,
                cmnuScanImage_OpenInSeparateWindow.Click

        ' Open detail window for the file-object.
        Select Case Me._CurrentContextMenuFileObject.FileType
            Case cFileObject.FileTypes.SpectroscopyTable
                ' Show Spectroscopy-Table Details
                Dim DataExplorer As New wDataExplorer_SpectroscopyTable
                DataExplorer.Show(Me._CurrentContextMenuFileObject)
                DataExplorer.SetInitialColumnSelection(Me._CurrentPreviewImageSettings.GetFirstExistingColumnName_X(Me._CurrentContextMenuFileObject.GetColumnNameList),
                                                       Me._CurrentPreviewImageSettings.GetFirstExistingColumnName_Y(Me._CurrentContextMenuFileObject.GetColumnNameList))

            Case cFileObject.FileTypes.ScanImage
                ' Show ScanImage Details
                Dim DataExplorer As New wDataExplorer_ScanImage
                DataExplorer.Show(Me._CurrentContextMenuFileObject)
                DataExplorer.SetInitialChannelSelection(Me._CurrentPreviewImageSettings.ScanImage_Channel)
        End Select
    End Sub
#End Region

#Region "Show multiple selected spectroscopy-tables together in the preview window."

    ''' <summary>
    ''' Show multiple selected spectroscopy-tables together in the preview window.
    ''' So report the selection back to the hosting window.
    ''' </summary>
    Private Sub mnuTools_PlotSpectraTogether_Click(sender As Object, e As EventArgs) Handles mnuTools_PlotSpectraTogether.Click
        RaiseEvent MultipleSpectroscopyTableSelectedShowInPreview(Me.FileObjectsSelected.Where(Function(obj) obj.FileType = cFileObject.FileTypes.SpectroscopyTable).ToList)
    End Sub

    ''' <summary>
    ''' Show multiple selected spectroscopy-tables together in the preview window.
    ''' So report the selection back to the hosting window.
    ''' </summary>
    Private Sub mnuTools_PlotSpectraTogetherAutomatic_Click(sender As Object, e As EventArgs) Handles mnuTools_PlotSpectraTogetherAutomatic.Click
        If Me.mnuTools_PlotSpectraTogetherAutomatic.Checked Then
            Me.mnuTools_PlotSpectraTogether_Click(Me.mnuTools_PlotSpectraTogether, Nothing)
        End If

        ' Store settings
        My.Settings.DataBrowserList_PlotSelectedSpectraTogetherAutomatic = Me.mnuTools_PlotSpectraTogetherAutomatic.Checked

    End Sub

#End Region

#Region "Search for the scan-image closest to the spectroscopy-table"
    ''' <summary>
    ''' Search for the scan-image closest to the spectroscopy-table
    ''' </summary>
    Private Sub cmnuSpectroscopy_ShowNearestScanImage_Click(sender As Object, e As EventArgs) Handles cmnuSpectroscopy_ShowNearestScanImage.Click

        If Me._CurrentContextMenuFileObject.FileType <> cFileObject.FileTypes.SpectroscopyTable Then Return

        ' Load all scan-images
        Dim ClosestScanImageFileObject As cFileObject = Me.GetScanImageNearestToSpectrumInTime(Me._CurrentContextMenuFileObject)
        If Not ClosestScanImageFileObject Is Nothing Then
            ' jump in the list to that file-object.
            Me.ScrollToListEntry(ClosestScanImageFileObject)
        End If

    End Sub

    ''' <summary>
    ''' Returns the Scan-Image-FileObject that lies closest in time to the SpectroscopyFileObject.
    ''' </summary>
    Private Function GetScanImageNearestToSpectrumInTime(ByRef SpectroscopyTableFileObject As cFileObject) As cFileObject
        Dim ScanImageFileObjectList As List(Of cFileObject) = Me.GetScanImagesInSpectrumLocation(SpectroscopyTableFileObject)
        ' Calculate the Time-Span between Scan-Image record-date and Spectroscopy-Table record date
        Dim CurrentTimeSpanBetween As Long
        Dim NearestTimeSpanBetween As Long = Long.MaxValue
        Dim NearestIndex As Integer = -1
        For i As Integer = 0 To ScanImageFileObjectList.Count - 1 Step 1
            CurrentTimeSpanBetween = ScanImageFileObjectList(i).RecordDate.Ticks - SpectroscopyTableFileObject.RecordDate.Ticks
            If Math.Abs(CurrentTimeSpanBetween) < NearestTimeSpanBetween Then
                NearestTimeSpanBetween = Math.Abs(CurrentTimeSpanBetween)
                NearestIndex = i
            End If
        Next
        If NearestIndex = -1 Then
            Return Nothing
        Else
            Return ScanImageFileObjectList(NearestIndex)
        End If
    End Function

    ''' <summary>
    ''' Returns all Scan-Images-FileNames in the Location
    ''' of the Spectroscopy-Table-FileObject
    ''' sorted by their absolute distance in time.
    ''' </summary>
    Private Function GetScanImagesInSpectrumLocation(ByRef SpectroscopyTableFileObject As cFileObject) As List(Of cFileObject)
        Dim ResultList As New List(Of cFileObject)
        For Each ScanImageFileObject As cFileObject In Me.oFileImporter.CurrentFileBufferFilteredByType(cFileObject.FileTypes.ScanImage).Values
            If cScanImage.CheckIfCoordinateLiesInImage(SpectroscopyTableFileObject.RecordLocation_X,
                                                       SpectroscopyTableFileObject.RecordLocation_Y,
                                                       ScanImageFileObject.RecordLocation_X,
                                                       ScanImageFileObject.RecordLocation_Y,
                                                       ScanImageFileObject.ScanImageRange_X,
                                                       ScanImageFileObject.ScanImageRange_Y) Then
                ResultList.Add(ScanImageFileObject)
            End If
        Next
        Return ResultList
    End Function

#End Region

#End Region

#Region "Filtering and Searching"

#Region "File-Name filtering"

#Region "Context-Menu filtering"

    ''' <summary>
    ''' Close the filter on pressing enter.
    ''' </summary>
    Private Sub mnuFilter_FilterText_KeyDown(sender As Object, e As KeyEventArgs) Handles mnuFilter_FilterText.KeyDown
        If e.KeyCode = Keys.Enter Then
            Me.mnuFilter.HideDropDown()
        End If
    End Sub

    ''' <summary>
    ''' on changing the filter text, rerun RegEx filtering of the column names.
    ''' </summary>
    Private Sub mnuFilter_FilterText_TextChanged(sender As Object, e As EventArgs) Handles mnuFilter_FilterText.TextChanged
        ' Change the filtering
        Me.SortAndFilterFileListUsingCurrentSettings()
    End Sub

    ''' <summary>
    ''' clear the filter
    ''' </summary>
    Private Sub cmnuFilterClear_Click(sender As Object, e As EventArgs) Handles mnuFilter_ClearFilter.Click
        Me.mnuFilter_FilterText.Text = String.Empty
    End Sub

    ''' <summary>
    ''' Use a regex to filter the file-names and returns if the filename matches the filter.
    ''' Replaces * by .*? in the regex.
    ''' True, if the filename matches the filter.
    ''' </summary>
    Private Function IsFileNameInFilter(ByVal FilterText As String, ByVal FilenameToFilter As String) As Boolean

        ' Trim empty space
        FilterText = FilterText.Trim

        ' Return without regex, if the filter is empty.
        If FilterText = String.Empty Then
            Return True
        Else
            Try
                ' replace * by regex .*? and escape other things
                FilterText = Regex.Escape(FilterText)
                FilterText = FilterText.Replace("\*", ".*?")

                If Regex.IsMatch(FilenameToFilter, "^" & FilterText & "$", RegexOptions.IgnoreCase Or RegexOptions.Singleline) Then Return True
            Catch ex As Exception
                Return True
            End Try
        End If

        Return False
    End Function

#End Region

#Region "Load and save the last used filters"

    ''' <summary>
    ''' Appends the last used filter to the list.
    ''' </summary>
    Private Sub AppendToFilterHistory(ByVal Filter As String)

        ' Append filters to history
        My.Settings.DataBrowserFileList_LastUsedFilters = cStringCollectionHistory.AppendToHistory(My.Settings.DataBrowserFileList_LastUsedFilters,
                                                                                                   Filter,
                                                                                                   My.Settings.DataBrowserFileList_FilterMaxHistory)
        ' Save the settings
        cGlobal.SaveSettings()

        ' Update the drop down history
        Me.UpdateFilterHistory()
    End Sub

    ''' <summary>
    ''' Add the current filter text to the history.
    ''' </summary>
    Private Sub cmnuFilterAddToHistory_Click(sender As Object, e As EventArgs) Handles mnuFilter_AddToHistory.Click
        Me.AppendToFilterHistory(Me.mnuFilter_FilterText.Text)
    End Sub


    ''' <summary>
    ''' Updates the drop down history.
    ''' </summary>
    Private Sub UpdateFilterHistory()
        With Me.mnuFilter_FilterHistory

            ' remove the handlers
            For i As Integer = 0 To .DropDownItems.Count - 1 Step 1
                RemoveHandler .DropDownItems(i).Click, AddressOf SelectFilterFromHistory
            Next

            ' remove the old buttons
            .DropDownItems.Clear()

            ' add button and handlers
            If My.Settings.DataBrowserFileList_LastUsedFilters.Count > 0 Then
                .Enabled = True
                ' Add the stored history
                For i As Integer = My.Settings.DataBrowserFileList_LastUsedFilters.Count - 1 To 0 Step -1
                    .DropDownItems.Add(My.Settings.DataBrowserFileList_LastUsedFilters(i))
                    AddHandler .DropDownItems(My.Settings.DataBrowserFileList_LastUsedFilters.Count - 1 - i).Click, AddressOf SelectFilterFromHistory
                Next
            Else
                .Enabled = False
            End If

        End With
    End Sub

    ''' <summary>
    ''' Select a filter from the history.
    ''' </summary>
    Private Sub SelectFilterFromHistory(sender As Object, e As EventArgs)
        Dim B As ToolStripDropDownItem = DirectCast(sender, ToolStripDropDownItem)

        Me.mnuFilter_FilterText.Text = B.Text
    End Sub

#End Region

#End Region

#Region "File-Name searching"

    ''' <summary>
    ''' When searched, saves the last file-name that got displayed for searching.
    ''' Is needed to "search next" using F3.
    ''' </summary>
    Private LastSearchedNameHighlighted As String = String.Empty

    ''' <summary>
    ''' Saves the current search string of the file-name search.
    ''' </summary>
    Private FileNameSearchString As String = String.Empty

    ''' <summary>
    ''' Searches for a file and jumps to the next entry.
    ''' </summary>
    Private Sub SearchAndJumpToNextHighlighEntry()
        ' Ignore empty search string.
        If FileNameSearchString = String.Empty Then Return
        Dim SearchMatchNext As Boolean = False

        ' Remember, if we have to start over
        Dim NotFound As Boolean = True
        Dim FoundAtLeastOnceButJumpedOver As Boolean = False

        Dim LE As FileListEntry = Nothing
        For Each LEName As String In Me.FileListDisplayed_SortedAndFiltered
            LE = Me.FileListDisplayed(LEName)
            If Me.IsFileNameInFilter(Me.mnuFilter_SearchText.Text, LE.FileObject.FileNameWithoutPath) Then
                ' First time search, or continued search?
                If LastSearchedNameHighlighted = String.Empty Or SearchMatchNext Then
                    ' first time search, remember search position
                    LastSearchedNameHighlighted = LE.FileObject.FileNameWithoutPath
                    Me.ScrollToListEntry(LE.FileObject)

                    NotFound = False
                    Exit For
                Else
                    ' continued search, remember search position, and go to next.
                    If LastSearchedNameHighlighted = LE.FileObject.FileNameWithoutPath Then
                        ' Found last entry, so the next one is the one to show now.
                        SearchMatchNext = True
                    End If
                    FoundAtLeastOnceButJumpedOver = True
                End If
            End If
        Next

        ' Wenn die Datei nicht gefunden wurde, dann starte die Suche von vorne.
        If NotFound And FoundAtLeastOnceButJumpedOver Then
            LastSearchedNameHighlighted = String.Empty
            Me.SearchAndJumpToNextHighlighEntry()
        End If

        LE = Nothing
    End Sub

    ''' <summary>
    ''' If the text in the search box changes, search for the file.
    ''' </summary>
    Private Sub mnuFilter_SearchText_TextChange(sender As Object, e As EventArgs) Handles mnuFilter_SearchText.TextChanged
        LastSearchedNameHighlighted = String.Empty
        FileNameSearchString = Me.mnuFilter_SearchText.Text
        Me.SearchAndJumpToNextHighlighEntry()
    End Sub

    ''' <summary>
    ''' Continue searching.
    ''' </summary>
    Private Sub mnuFilter_SearchNext_Click(sender As Object, e As EventArgs) Handles mnuFilter_SearchNext.Click
        Me.SearchAndJumpToNextHighlighEntry()
    End Sub

    ''' <summary>
    ''' Clear the search filter
    ''' </summary>
    Private Sub mnuFilter_SearchClear_Click(sender As Object, e As EventArgs) Handles mnuFilter_SearchClear.Click
        Me.mnuFilter_SearchText.Text = String.Empty
        FileNameSearchString = String.Empty
    End Sub

#End Region

#Region "Special Tools Menu"

    ''' <summary>
    ''' Open a spectroscopy-grid viewer.
    ''' </summary>
    Private Sub mnuSpecialTools_GridViewer_Click(sender As Object, e As EventArgs) Handles mnuSpecialTools_GridViewer.Click
        Dim GV As New wGridPlotter
        GV.Show(Me.oFileImporter)
    End Sub

#End Region

#End Region

End Class
